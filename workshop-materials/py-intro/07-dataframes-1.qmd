---
toc: true
toc-expand: 2
---

::: {.callout-note}
## Credits & copyright
Many questions originate from the carpentry lesson ["Plotting and Programming in Python"](http://swcarpentry.github.io/python-novice-gapminder/), some were
authored by the *bio*DSC. Carpentries website materials are [licenced](https://software-carpentry.org/license/) under the [CC BY 4.0](https://creativecommons.org/licenses/by/4.0/),
which also applies to the contents of this website.
:::


---

# Exercises Lesson 7: Dataframes (1)

<!-- ####################################################################### -->

### Reading other data
::: {.callout-tip icon='false'}
## Question

Read the data in `gapminder_gdp_americas.csv` (which should be in the same directory as `gapminder_gdp_oceania.csv`) into a variable called `data_americas` and display its summary statistics.
:::
::: {.callout-caution collapse='true' icon='false'}
## Answer

To read in a CSV, we use `pd.read_csv` and pass the filename 'data/gapminder_gdp_americas.csv' to it. We also once again pass the column name 'country' to the parameter index_col in order to index by country. The summary statistics can be displayed with the `DataFrame.describe()` method.

```Python
data_americas = pd.read_csv('data/gapminder_gdp_americas.csv', index_col='country')
data_americas.describe()
```
:::

<!-- Carpentries credits L7 -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: [Carpentries workshop materials](https://swcarpentry.github.io/python-novice-gapminder/07-reading-tabular.html){style="color: #777777" target=_blank}.</font>*
</div>


<!-- ####################################################################### -->

### Inspecting data
::: {.callout-tip icon='false'}
## Question 

After reading the data for the Americas, use `help(data_americas.head)` and `help(data_americas.tail)` to find out what `DataFrame.head` and `DataFrame.tail` do.

1. What method call will display the first three rows of this data?
2. What method call will display the last three columns of this data? (Hint: you may need to change your view of the data.)

:::

::: {.callout-caution collapse='true' icon='false'}
## Answer

1. We can check out the first five rows of data_americas by executing d`ata_americas.head()` which lets us view the beginning of the DataFrame. We can specify the number of rows we wish to see by specifying the parameter `n` in our call to `data_americas.head()`. To view the first three rows, execute:

```Python
data_americas.head(n=3)
```

```Python
continent  gdpPercap_1952  gdpPercap_1957  gdpPercap_1962  \
country
Argentina  Americas     5911.315053     6856.856212     7133.166023
Bolivia    Americas     2677.326347     2127.686326     2180.972546
Brazil     Americas     2108.944355     2487.365989     3336.585802

          gdpPercap_1967  gdpPercap_1972  gdpPercap_1977  gdpPercap_1982  \
country
Argentina     8052.953021     9443.038526    10079.026740     8997.897412
Bolivia       2586.886053     2980.331339     3548.097832     3156.510452
Brazil        3429.864357     4985.711467     6660.118654     7030.835878

           gdpPercap_1987  gdpPercap_1992  gdpPercap_1997  gdpPercap_2002  \
country
Argentina     9139.671389     9308.418710    10967.281950     8797.640716
Bolivia       2753.691490     2961.699694     3326.143191     3413.262690
Brazil        7807.095818     6950.283021     7957.980824     8131.212843

           gdpPercap_2007
country
Argentina    12779.379640
Bolivia       3822.137084
Brazil        9065.800825
```

2. To check out the last three rows of data_americas, we would use the command, americas.tail(n=3), analogous to head() used above. However, here we want to look at the last three columns so we need to change our view and then use tail(). To do so, we create a new DataFrame in which rows and columns are switched:

```Python
americas_flipped = data_americas.T
```
We can then view the last three columns of americas by viewing the last three rows of americas_flipped:
```Python
americas_flipped.tail(n=3)
```

```Python
country        Argentina  Bolivia   Brazil   Canada    Chile Colombia  \
gdpPercap_1997   10967.3  3326.14  7957.98  28954.9  10118.1  6117.36
gdpPercap_2002   8797.64  3413.26  8131.21    33329  10778.8  5755.26
gdpPercap_2007   12779.4  3822.14   9065.8  36319.2  13171.6  7006.58

country        Costa Rica     Cuba Dominican Republic  Ecuador    ...     \
gdpPercap_1997    6677.05  5431.99             3614.1  7429.46    ...
gdpPercap_2002    7723.45  6340.65            4563.81  5773.04    ...
gdpPercap_2007    9645.06   8948.1            6025.37  6873.26    ...

country          Mexico Nicaragua   Panama Paraguay     Peru Puerto Rico  \
gdpPercap_1997   9767.3   2253.02  7113.69   4247.4  5838.35     16999.4
gdpPercap_2002  10742.4   2474.55  7356.03  3783.67  5909.02     18855.6
gdpPercap_2007  11977.6   2749.32  9809.19  4172.84  7408.91     19328.7

country        Trinidad and Tobago United States  Uruguay Venezuela
gdpPercap_1997             8792.57       35767.4  9230.24   10165.5
gdpPercap_2002             11460.6       39097.1     7727   8605.05
gdpPercap_2007             18008.5       42951.7  10611.5   11415.8
```

This shows the data that we want, but we may prefer to display three columns instead of three rows, so we can flip it back:

```Python
americas_flipped.tail(n=3).T    
```
**Note**: we could have done the above in a single line of code by ‘chaining’ the commands:
```Python
data_americas.T.tail(n=3).T
```
:::

<!-- Carpentries credits L7 -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: [Carpentries workshop materials](https://swcarpentry.github.io/python-novice-gapminder/07-reading-tabular.html){style="color: #777777" target=_blank}.</font>*
</div>

<!-- ####################################################################### -->

### Navigating directories

::: {.callout-tip icon='false'}
## Question 

The data for your current project is stored in a file called microbes.csv, which is located in a folder called field_data. You are doing analysis in a notebook called analysis.ipynb in a sibling folder called thesis:

```Python
your_home_directory
+-- field_data/
|   +-- microbes.csv
+-- thesis/
    +-- analysis.ipynb
```

What value(s) should you pass to read_csv to read microbes.csv in analysis.ipynb?
:::
::: {.callout-caution collapse='true' icon='false'}
## Answer
We need to specify the path to the file of interest in the call to `pd.read_csv`. We first need to ‘jump’ out of the folder thesis using ‘../’ and then into the folder field_data using ‘field_data/’. Then we can specify the filename `microbes.csv. The result is as follows:

```Python
data_microbes = pd.read_csv('../field_data/microbes.csv')
```
:::

<!-- Carpentries credits L7 -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: [Carpentries workshop materials](https://swcarpentry.github.io/python-novice-gapminder/07-reading-tabular.html){style="color: #777777" target=_blank}.</font>*
</div>

<!-- ####################################################################### -->

### Writing data
::: {.callout-tip icon='false'}
## Question
As well as the `read_csv()` function for reading data from a file, Pandas provides a `to_csv()` function to write dataframes to files. Applying what you’ve learned about reading from files, write one of your dataframes to a file called processed.csv. You can use help to get information on how to use `to_csv()`.
:::

::: {.callout-caution collapse='true' icon='false'}
## Answer

In order to write the DataFrame data_americas to a file called processed.csv, execute the following command:

```Python
data_americas.to_csv('processed.csv')
```

For help on read_csv or to_csv, you could execute, for example:

```Python
help(data_americas.to_csv)
help(pd.read_csv)
```

Note that `help(to_csv)` or `help(pd.to_csv)` throws an error! This is due to the fact that to_csv is not a global Pandas function, but a member function of DataFrames. This means you can only call it on an instance of a DataFrame e.g., `data_americas.to_csv` or `data_oceania.to_csv`

:::

<!-- Carpentries credits L7 -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: [Carpentries workshop materials](https://swcarpentry.github.io/python-novice-gapminder/07-reading-tabular.html){style="color: #777777" target=_blank}.</font>*
</div>

##################################################
---

<!-- ####################################################################### -->
<!-- ####################################################################### -->

# Additional exercises

<!-- ####################################################################### -->

### Working with data

::: {.callout-tip icon='false'}
## Question 

1. Create some sample data
    - Create a plain text file on your computer, and give it the extension `.csv`. 
    - Find out what the comma-separated format looks like. 
    - Use your imagination to complete the following table and put it in the `.csv` file. 

        |replicate| cond1   |  cond2 |
        |---|---|---|
        |   | 10  |   |
        |   | 11 |   |
        |   | 10  |   |
        |   | 12  |   |
        |   | 13  |   |
        |   | 13  |   |
    
2. Now try to read in that table in your python notebook.
3. Get the following code to run on your dataframe (referred to as `df` below):
```python
from scipy.stats import ttest_ind
t_stat, p_value = ttest_ind(df['cond1'], df['cond2'])
print(f"T-statistic: {t_stat}, P-value: {p_value}")
```
4. What does that code do? 
5. If you haven't already, let's do some data massaging, and tweak the csv such that you get a significant p-val between the two conditions. (Don't manipulate real data like this ;).)
:::


::: {.callout-caution collapse='true' icon='false'}
## Answer

1. In a csv file, the values are separated by a comma. As an example we compare cond1 vs cond2 for 6 replicate samples (R1 through R6).
A possible data file (saved as [mydata.csv](/static/data/mydata.csv)) could look like:

```bash
replicate,cond1,cond2
R1, 10, 1
R2, 11, 2
R3, 10, 2
R4, 12, 3
R5, 13, 2
R6, 13, 1
```

2. To load this file in a dataframe, use
```Python
df = pd.read_csv('mydata.csv',header=0)
```

3. Running the code results in 
```python
T-statistic: 15.076382102391054, P-value: 3.329703635867358e-08
```
4. The code calulates the t-statistic between the two conditions (with values for cond1 in column 2, accessed by `df['cond1']`, and values for cond2 in column 3 accessed by `df['cond2']`) and its associated p-value.

:::

<!-- bioDSC credits -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: *bio*DSC.</font>*
</div>
