---
toc: true
toc-expand: 2
---

::: {.callout-note}
## Credits & copyright
Many questions originate from the carpentry lesson ["Plotting and Programming in Python"](http://swcarpentry.github.io/python-novice-gapminder/), some were
authored by the *bio*DSC. Carpentries website materials are [licenced](https://software-carpentry.org/license/) under the [CC BY 4.0](https://creativecommons.org/licenses/by/4.0/),
which also applies to the contents of this website.
:::


---

# Exercises Lesson 16: Functions


<!-- ####################################################################### -->

### Identifying Syntax Errors 

::: {.callout-tip icon='false'}
## Question 
1. Read the code below and try to identify what the errors are *without* running it.
2. Run the code and read the error message. Is it a `SyntaxError` or an `IndentationError`?
3. Fix the error.
4. Repeat steps 2 and 3 until you have fixed all the errors.
```python
def another_function
  print("Syntax errors are annoying.")
   print("But at least python tells us about them!")
  print("So they are usually not too hard to fix.")
```
:::

::: {.callout-caution collapse='true' icon='false'}
## Answer

```python
def another_function(): # the function definition was not finished
  print("Syntax errors are annoying.")
  print("But at least Python tells us about them!") # this line was not properly indented
  print("So they are usually not too hard to fix.")
```
:::

<!-- Carpentries credits L16 -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: [Carpentries workshop materials](https://swcarpentry.github.io/python-novice-gapminder/16-writing-functions.html){style="color: #777777" target=_blank}.</font>*
</div>

<!-- ####################################################################### -->

### Definition and Use

::: {.callout-tip icon='false'}
## Question 
What does the following program print?

```python
def report(pressure):
    print('pressure is', pressure)

print('calling', report, 22.5)
```

:::

::: {.callout-caution collapse='true' icon='false'}
## Answer
```
calling <function report at 0x7fd128ff1bf8> 22.5
```
A function call always needs parenthesis, otherwise you get memory address of the function object. So, if we wanted to call the function named report, and give it the value 22.5 to report on, we could have our function call as follows

```python
print("calling")
report(22.5)
```
which outputs:
```bash
calling
pressure is 22.5
```
:::

<!-- Carpentries credits L16 -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: [Carpentries workshop materials](https://swcarpentry.github.io/python-novice-gapminder/16-writing-functions.html){style="color: #777777" target=_blank}.</font>*
</div>

<!-- ####################################################################### -->

### Encapsulation

::: {.callout-tip icon='false'}
## Question 
Fill in the blanks to create a function that takes a single filename as an argument, loads the data in the file named by the argument, and returns the minimum value in that data.

```python
import pandas as pd

def min_in_data(____):
    data = ____
    return ____
```

:::


::: {.callout-caution collapse='true' icon='false'}
## Answer
```python
import pandas as pd

def min_in_data(filename):
    data = pd.read_csv(filename)
    return data.min()
```
:::

<!-- Carpentries credits L16 -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: [Carpentries workshop materials](https://swcarpentry.github.io/python-novice-gapminder/16-writing-functions.html){style="color: #777777" target=_blank}.</font>*
</div>


---


<!-- ####################################################################### -->
<!-- ####################################################################### -->

# Additional Exercises

<!-- ####################################################################### -->

### Order of Operations

::: {.callout-tip icon='false'}
## Question 
1.  Whatâ€™s wrong in this example?

```python
result = print_time(11, 37, 59)

def print_time(hour, minute, second):
   time_string = str(hour) + ':' + str(minute) + ':' + str(second)
   print(time_string)
```

2. After fixing the problem above, explain why running this example code:

```python
result = print_time(11, 37, 59)
print('result of call is:', result)
```

gives this output:

```
11:37:59
result of call is: None
```

3. Why is the result of the call None?
:::

::: {.callout-caution collapse='true' icon='false'}
## Answer

1. The problem with the example is that the function `print_time()` is defined after the call to the function is made. Python doesn't know how to resolve the name `print_time` since it hasn't been defined yet and will raise a NameError e.g., `NameError: name 'print_time' is not defined`

2. The first line of output 11:37:59 is printed by the first line of code, `result = print_time(11, 37, 59)` that binds the value returned by invoking `print_time` to the variable `result`. The second line is from the second print call to print the contents of the `result` variable.

3. `print_time()` does not explicitly return a value, so it automatically returns None.

:::

<!-- Carpentries credits L16 -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: [Carpentries workshop materials](https://swcarpentry.github.io/python-novice-gapminder/16-writing-functions.html){style="color: #777777" target=_blank}.</font>*
</div>



<!-- ####################################################################### -->

### Find the First

::: {.callout-tip icon='false'}
## Question 
Fill in the blanks to create a function that takes a list of numbers as an argument and returns the first negative value in the list. What does your function do if the list is empty? What if the list has no negative numbers?

```python
def first_negative(values):
    for v in ____:
        if ____:
            return ____
```
:::


::: {.callout-caution collapse='true' icon='false'}
## Answer

```python
def first_negative(values):
    for v in values:
        if v < 0:
            return v
```

If an empty list or a list with all positive values is passed to this function, it returns `None`:

```python
my_list = []
print(first_negative(my_list))
```
```
None
```
:::

<!-- Carpentries credits L16 -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: [Carpentries workshop materials](https://swcarpentry.github.io/python-novice-gapminder/16-writing-functions.html){style="color: #777777" target=_blank}.</font>*
</div>

<!-- ####################################################################### -->

### Calling by Name
::: {.callout-tip icon='false'}
## Question 
Earlier we saw this function:

```python
def print_date(year, month, day):
    joined = str(year) + '/' + str(month) + '/' + str(day)
    print(joined)
```

We saw that we can call the function using named arguments, like this:
```python
print_date(day=1, month=2, year=2003)
```

1. What does `print_date(day=1, month=2, year=2003)` print?
2. When have you seen a function call like this before?
3. When and why is it useful to call functions this way?

:::

::: {.callout-caution collapse='true' icon='false'}
## Answer

1. 2003/2/1
2. We saw examples of using named arguments when working with the pandas library. For example, when reading in a dataset using data = pd.read_csv('data/gapminder_gdp_europe.csv', index_col='country'), the last argument index_col is a named argument.
3. Using named arguments can make code more readable since one can see from the function call what name the different arguments have inside the function. It can also reduce the chances of passing arguments in the wrong order, since by using named arguments the order doesn't matter.

:::

<!-- Carpentries credits L16 -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: [Carpentries workshop materials](https://swcarpentry.github.io/python-novice-gapminder/16-writing-functions.html){style="color: #777777" target=_blank}.</font>*
</div>

<!-- ####################################################################### -->

### Primes

::: {.callout-tip icon='false'}
## Question
Write a function that looks as follows:
```python
def calculate_primes(N):
    ...
```
that returns an array with prime numbers between 0 and N.

*Hints*:

- Start with writing a function `is_number_prime(X)`, that checks whether `X` is a prime number.
- You probably need the following ingredients for that function: 
    - How to test if a number is divisible by any number?
    - Use a for loop to test whether `X` can be divided by all numbers `<X`.
    - Could be convenient to make smart use of the `return` function.
    
```python
def is_number_prime(X):
    
    # <insert explanatory comment>
    for y in range(X):
    
        # <insert explanatory comment>
        if ...:
            return False
    
    # <insert explanatory comment>
    return True

def calculate_primes(N):
    ...
```

:::

::: {.callout-caution collapse='true' icon='false'}
## Answer


```python
def is_number_prime(X):
    '''
    This functions tests whether X is a prime number,
    and returns either False if not, or True if so.
    '''
    
    # Prime numbers are not divisible by any number
    # other than 1 and itself.
    # So if X can be divided by any number between
    # 1 and X, it is not a prime number.
    # So we'll test for each number 2 .. (X-1)
    # whether X can be divided by it.
    for y in range(2, X):
    
        # We test this by checking whether there's 
        # a remainder after a division.
        # (E.g. 7/3 has a remainder of 1 as 
        # 7 = 3 + 3 + 1, and so 7 is not divisible
        # by 3.)
        if X % y == 0:
            # if there's no remainder,
            # it could be divided, 
            # and it is not a prime number
            # --> return false
            return False
    
    # if for all numbers tested a division
    # wasn't possible, the number is a prime
    # number --> return true.
    return True

def calculate_primes(N):
    '''
    Returns all prime numbers between
    0 and N (not including N).
    '''
    
    prime_list = []
    
    # Loop over 2..N, and test 
    # whether the number is prime
    # and if so add it to the list.
    # (Note that 1 is excluded since
    # it's not prime anyways).
    for X in range(2, N):
        
        # Add X to list if it's prime
        if is_number_prime(X):
            prime_list.append(X)
    
    return(prime_list)

# Check whether it works            
primes_known_upto100 = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
primes_calculated_by_me = calculate_primes(100+1)
if (primes_known_upto100 == primes_calculated_by_me):
    print('Hurray it works!')
else:
    print('Oh nooo.')
    
```



:::

<!-- bioDSC credits -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: *bio*DSC.</font>*
</div>



<!-- ####################################################################### -->

### Write your own function 

If you still have a taste for exercises, and haven't finished 
the exercise ["Writing your own function"](06-libraries.qmd){target="_blank"} from the additional exercises in lesson 6,
maybe check that one out!

<!-- ####################################################################### -->

### Even more exercises

If you even still have a taste for more exercises, check out exercises that the Carpentries drafted,
[at the section of their workshop materials regarding functions](https://swcarpentry.github.io/python-novice-gapminder/instructor/16-writing-functions.html){target="_blank"}. *(Continue exercises at: "Encapsulation of an If/Print Block".)*



