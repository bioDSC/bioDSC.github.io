::: {.callout-note}
## disclaimer
Most questions are copied from the carpentry lesson ["Plotting and Programming in Python"](http://swcarpentry.github.io/python-novice-gapminder/)
:::
---

# Exercises Lesson 3, types

### 1. Types

::: {.callout-tip icon="false"}
### Question A
What type of value is 3.4? How can you find out?
:::

::: {.callout-caution collapse="true" icon="false"}
## Answer
It is a floating-point number (often abbreviated “float”). It is possible to find out by using the built-in function type().
```Python
print(type(3.4))
```
```Python
<class 'float'>
```
:::
#### 
::: {.callout-tip icon="false"}
### Question B
What type of value is 3.25 + 4?
:::

::: {.callout-caution collapse="true" icon="false"}
## Answer
It is a float: integers are automatically converted to floats as necessary.
```Python
result = 3.25 + 4
print(result, 'is', type(result))
```
```Python
7.25 is <class 'float'>
```
:::

::: {.callout-tip icon="false"}
### Question C
What type of value (integer, floating point number, or character string) would you use to represent each of the following? Try to come up with more than one good answer for each problem. For example, in # 1, when would counting days with a floating point variable make more sense than using an integer?

1. Number of days since the start of the year.
2. Time elapsed from the start of the year until now in days.
3. Serial number of a piece of lab equipment.
4. A lab specimen’s age
5. Current population of a city.
6. Average population of a city over time.
:::
::: {.callout-caution collapse="true" icon="false"}
## Answer
The answers to the questions are:

1. Integer, since the number of days would lie between 1 and 365. 
2. Floating point, since fractional days are required 
3. Character string if serial number contains letters and numbers, otherwise integer if the serial number consists only of numerals 
4. This will vary! How do you define a specimen’s age? whole days since collection (integer)? date and time (string)? 
5. Choose floating point to represent population as large aggregates (eg millions), or integer to represent population in units of individuals. 
6. Floating point number, since an average is likely to have a fractional part. 
:::

::: {.callout-tip icon="false"}
### Question D (bio*DSC*)
Why wouldn't you always use floats, and never use integers?
:::
::: {.callout-caution collapse="true" icon="false"}
## Answer
An integer has exact precision and a larger range, whereas float has limited precision and can represent numbers with a decimal part. 
:::

### 2. Strings to numbers

Where reasonable, float() will convert a string to a floating point number, and int() will convert a floating point number to an integer:

```Python
print("string to float:", float("3.4"))
print("float to int:", int(3.4))
```

```
OUTPUT:
string to float: 3.4
float to int: 3
If the conversion doesn’t make sense, however, an error message will occur.
```

```Python
print("string to float:", float("Hello world!"))
```
::: {.callout-tip icon="false"}
### Question E
1. What do you expect the following program to do?
2. What does it actually do?
3. Why do you think it does that?

```Python
print("fractional string to int:", int("3.4"))
```
:::
::: {.callout-caution collapse="true" icon="false"}
## Answer
1. What do you expect this program to do? It would not be so unreasonable to expect the Python 3 int command to convert the string “3.4” to 3.4 and an additional type conversion to 3. After all, Python 3 performs a lot of other magic - isn’t that part of its charm?

2. However, Python 3 throws an error. 

```Python
print(int("3.4"))
```
```Python
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: invalid literal for int() with base 10: '3.4'
```

3. Why? To be consistent, possibly. If you ask Python to perform two consecutive typecasts, you must convert it explicitly in code.
```Python
print(int(float("3.4")))
```
```Python
3
```
:::

::: {.callout-tip icon="false"}
### Question F
Which of the following will return the floating point number 2.0? Note: there may be more than one right answer.

```Python
first = 1.0
second = "1"
third = "1.1"
```

```
1. first + float(second)
2. float(second) + float(third)
3. first + int(third)
4. first + int(float(third))
5. int(first) + int(float(third))
6. 2.0 * second
```
:::

::: {.callout-caution collapse="true" icon="false"}
## Answer
1. 2.0
2. 2.1
3. ValueError
4. 2.0
5. 2
6. TypeError

So, 1 and 4
:::


############################################################
---

# Additional exercises

### 3. Lists

We'll cover lists later in lesson 11, but let's already take a brief look.

A list is a series of elements bound together, where each element can have a value. They are defined as follows:

```
numbers = [1,2,3]
fruits = ['apples', 'pears', 'oranges']
physical_constants = ['pi', 3.14, 'c', 299_792_458, 'mole', 6.022e23]
```

Elements can be accessed the same way as we saw with strings.



::: {.callout-tip icon="false"}
#### Question G
What will `numbers[1]` return? And `physical_constants[2:4]`?
:::

::: {.callout-caution collapse="true" icon="false"}
## Answer
```Python
numbers[1] will return 1 because in Python indexing vectors starts at position 0 (=0+1)
numbers[2:4] returns ['c',299792458] because indexing starts at the 3rd position (=2+1) and the slicing parameters stops at the position 4-1 (=3+1)
```
:::


::: {.callout-tip icon="false"}
#### Question H
What is the type of 

- `numbers`?
- `numbers[1]`?
- `physical_constants`?
- `physical_constants[1]`?
- `physical_constants[2]`?
- `physical_constants[3]`?
- `fruits`?
- `fruits[1]`?
:::
::: {.callout-caution collapse="true" icon="false"}
## Answer

- `type(numbers) <class 'list'>`
- `type(numbers[1]) <class 'int'>`
- `type(physical_constants) <class 'list'>`
- `type(physical_constants[1]) <class 'float'>`
- `type(physical_constants[2]) <class 'str'>`
- `type(physical_constants[3]) <class 'int'>`
- `type(fruits) <class 'list'>`
- `type(fruits[1]) <class 'str'>`

:::

::: {.callout-tip icon="false"}
#### Question I
Can the elements in a list have different types? (This can be seen from the previous answer.)
:::

::: {.callout-caution collapse="true" icon="false"}
## Answer
Yes, a single list may contain numbers, strings, and anything else.
:::



### 3. np.array

Lists can be a useful tool, but for example in image analysis, don't offer the full mathematical options one might like. `numpy` arrays introduce a new type of series, in which you can do more manipulations. See some examples below:

```Python
import numpy as np
my_array = [1,2,3,5]
my_array_np = np.array([1,2,3,5])
```

::: {.callout-tip icon="false"}
#### Question I
what's the difference here: 

- `my_array+1`
- `my_array_np+1`
:::
::: {.callout-caution collapse="true" icon="false"}
## Answer
- `my_array+1`, throws an error message because there is no operator defined that accepts a list type **and** an int type. If you want to concatenate the two, use my_array+[1] 
- `my_array_np+1`, returns array([2, 3, 4, 6]), an np.array where every element from my_array_np has been increased by 1
:::


::: {.callout-tip icon="false"}
#### Question J
what's the difference here:

- `my_array * 3`
- `my_array_np * 3`
:::

::: {.callout-caution collapse="true" icon="false"}
## Answer
- `my_array * 3`, returns [1, 2, 3, 5, 1, 2, 3, 5, 1, 2, 3, 5] because the * operator repeats the list 3 times
- `my_array_np * 3`, returns array([3, 6, 9, 15]) because in numpy, the * multplies the value of each element 3 times
:::



::: {.callout-tip icon="false"}
#### Question K
what's the difference here:

- `my_array + [1,2,3,4]`
- `my_array_np + np.array([1, 2, 3, 4])`
- `np.sin(my_array_np)`
:::
::: {.callout-caution collapse="true" icon="false"}
## Answer
- `my_array + [1,2,3,4]`, returns a concatenated list [1, 2, 3, 5, 1, 2, 3, 4]. Like in question J, the + operator concatenates two lists.
- `my_array_np + np.array([1, 2, 3, 4])`, returns the element wise sum of both vectors, so array([2, 4 ,6 ,9])
- `np.sin(my_array_np)`, returns the result of applying the sin function to each element in my_array_np, array([ 0.84147098,  0.90929743,  0.14112001, -0.95892427])
:::

::: {.callout-tip icon="false"}
#### Question L
numpy-specific things, what is happening?

- `my_array_np[range(1,4,2)]`
- `my_array_np[my_array_np>1]`
:::

::: {.callout-caution collapse="true" icon="false"}
## Answer
- `my_array_np[range(1,4,2)]`, returns array([2,5]), the second and fourth element of my_array_np. range(1, 4, 2) generates numbers from 1 to 4 with a stepsize of 2
- `my_array_np[my_array_np>1]`, returns array([2,3,5]), the > 1 clause only selects those elements whos values is larger than 1.
:::


::: {.callout-tip icon="false"}
#### Question M
Can numpy arrays have different types?
What is the type of the elements in these two arrays?

- `np.array([1,2,3,'4'])`
- `np.array([1,2,3,'hello'])`
:::

::: {.callout-caution collapse="true" icon="false"}
## Answer
- `np.array([1,2,3,'4'])`, returns array(['1', '2', '3', '4'], dtype='<U21')
- `np.array([1,2,3,'hello'])`, returns array(['1', '2', '3', 'hello'], dtype='<U21')

The elements of a NumPy array must all be of the same type, whereas the elements of a Python list can be of completely different types.
:::

### 4. Dict(ionary)

Python has more types. A `dict` is sometimes very convenient, and is also used later, when creating tables.

```Python
experimental_replicate_list = {'WT': 12, 'mut': 32, 'WT.cond1': 10, 'mut.cond1': 12}
print(experimental_replicate_list)
print(experimental_replicate_list['WT'])
```
::: {.callout-tip icon="false"}
#### Question N
Edit the following code such that we get the associated numbers for conditions involving WT

```Python
my_keys = experimental_replicate_list.keys()
print(my_keys)
my_keys_of_interest = [the_key for the_key in my_keys if 'mut' in the_key] # edit this line
print(my_keys_of_interest)
print([experimental_replicate_list[sel_key] for sel_key in my_keys_of_interest])
```
:::

::: {.callout-caution collapse="true" icon="false"}
## Answer
- `my_keys_of_interest = [the_key for the_key in my_keys if 'WT' in the_key]`
- `print(my_keys_of_interest)`, returns ['WT', 'WT.cond1']
- `print([experimental_replicate_list[sel_key] for sel_key in my_keys_of_interest])`, returns [12,10]
:::

::: {.callout-tip icon="false"}
#### Question O
The above code uses several lines, can you do this in one line?
:::
::: {.callout-caution collapse="true" icon="false"}
## Answer
- `print([experimental_replicate_list[key] for key in experimental_replicate_list.keys() if 'WT' in key])`
:::




### Special maths (Carpentries)

In Python 3, the `//` operator performs integer (whole-number) floor division, the `/` operator performs floating-point division, and the `%` (or modulo) operator calculates and returns the remainder from integer division:

```Python
print('5 // 3:', 5 // 3)
print('5 / 3:', 5 / 3)
print('5 % 3:', 5 % 3)
```

```
OUTPUT:
5 // 3: 1
5 / 3: 1.6666666666666667
5 % 3: 2
```

If num_subjects is the number of subjects taking part in a study, and num_per_survey is the number that can take part in a single survey, write an expression that calculates the number of surveys needed to reach everyone once.

### Complex numbers (Carpentries)

Python provides complex numbers, which are written as 1.0+2.0j. If val is a complex number, its real and imaginary parts can be accessed using dot notation as val.real and val.imag.

```Python
a_complex_number = 6 + 2j
print(a_complex_number.real)
print(a_complex_number.imag)
```

::: {.callout-tip icon="false"}
#### Question P
1. Why do you think Python uses j instead of i for the imaginary part?
2. What do you expect 1 + 2j + 3 to produce?
3. What do you expect 4j to be? What about 4 j or 4 + j?
:::


::: {.callout-caution collapse="true" icon="false"}
## Answer
1. Python uses the symbol 'j' for the imaginary part of complex numbers instead of 'i' to prevent confusion with electric current, which is represented by 'i' in electrical engineering. This choice caters to the professional background of many Python developers.
2. 4 + 2j, the real parts can be added and the imaginary part remains the same
3. 4j is 4 times the complex number j (4\*1j), 4 j will generate a syntax error, it's missing an operator. 4 + j will treat j as a variable and try to take the sum of both but throws an error if j is not defined or of the wrong type.

:::