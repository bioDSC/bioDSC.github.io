
############################################################
---

# Exercises Lesson 2, variables



#### 1. Order of things

##### A

Fill the table showing the values of the variables in this program after each statement is executed.

```Python
# Command  # Value of x   # Value of y   # Value of swap #
x = 1.0    #              #              #               #
y = 3.0    #              #              #               #
swap = x   #              #              #               #
x = y      #              #              #               #
y = swap   #              #              #               #
```

##### B

What is the final value of position in the program below? (Try to predict the value without running the program, then check your prediction.)

```Python
initial = 'left'
position = initial
initial = 'right'
```

#### "Challenge"

If you assign a = 123, what happens if you try to get the second digit of a via a[1]?


#### Slicing

<!-- REMOVED TO SAVE TIME
##### A

What does the following program print?

```
atom_name = 'carbon'
print('atom_name[1:3] is:', atom_name[1:3])
```

###### B
-->

Given the following string:
```Python
species_name = "Acacia buxifolia"
```
what would these expressions return?

```Python
species_name[2:8]
species_name[11:] (without a value after the colon)
species_name[:4] (without a value before the colon)
species_name[:] (just a colon)
species_name[11:-3]
species_name[-5:-3]
```

What happens when you choose a stop value which is out of range? (i.e., try species_name[0:20] or species_name[:103])

############################################################
---

## Lesson 2, additional exercises 

#### Naming (Carpentries)

Which is a better variable name, m, min, or minutes? Why? Hint: think about which code you would rather inherit from someone who is leaving the lab:

```Python
ts = m * 60 + s
tot_sec = min * 60 + sec
total_seconds = minutes * 60 + seconds
```

#### Additional exercises for fast participants (by bioDSC)

What's happening here:

```Python

# use Google or chatGPT if you don't know the answers
# if you're at the end, try to play around more

greetings_strings = ['hello', 'bye', 'later']
print(greetings_strings[0])
print(greetings_strings[1][2])
    # (list of lists)

print([greetings_strings[idx] for idx in [0, 2]])
print([greetings_strings[0][idx] for idx in [0, 2, 4]])
print([greetings_strings[0][idx] for idx in range(0,4,2)])
    # using a loop (will be covered later) / list comprehension

square_values = [number**2 for number in range(10)]
square_values_string = [str(number**2) for number in range(10)]
print(square_values)
print(square_values_string)
    # types will be the topic of the next lesson

species_name = "Acacia buxifolia"
print("".join([species_name[i] for i in range(10, 2, -1)]))
    # convenient command when working with strings

print(species_name.replace('Aca', 'Bole'))
    # another convenient command

# Exercise:
list_of_species = ['','','','']
list_of_species = ['Homo sapiens', 'Escherichia Coli', 'Pan troglodytes', 'Canis lupus', 'Felis catus']
# Create a new lists, where you remove all letters 'e'
```

############################################################
---

# Exercises Lesson 3, types

### Types

#### A

What type of value is 3.4? How can you find out?

#### B

What type of value is 3.25 + 4?

#### C 

What type of value (integer, floating point number, or character string) would you use to represent each of the following? Try to come up with more than one good answer for each problem. For example, in # 1, when would counting days with a floating point variable make more sense than using an integer?

- Number of days since the start of the year.
- Time elapsed from the start of the year until now in days.
- Serial number of a piece of lab equipment.
- A lab specimen’s age
- Current population of a city.
- Average population of a city over time.

#### D (added bioDSC)

Why wouldn't you always use floats, and never use integers?


### Strings to numbers

Where reasonable, float() will convert a string to a floating point number, and int() will convert a floating point number to an integer:

```Python
print("string to float:", float("3.4"))
print("float to int:", int(3.4))
```

```
OUTPUT:
string to float: 3.4
float to int: 3
If the conversion doesn’t make sense, however, an error message will occur.
```

```Python
print("string to float:", float("Hello world!"))
```

Given this information, what do you expect the following program to do?

What does it actually do?

Why do you think it does that?

```Python
print("fractional string to int:", int("3.4"))
```

Which of the following will return the floating point number 2.0? Note: there may be more than one right answer.

```Python
first = 1.0
second = "1"
third = "1.1"
```

```
1. first + float(second)
2. float(second) + float(third)
3. first + int(third)
4. first + int(float(third))
5. int(first) + int(float(third))
6. 2.0 * second
```

############################################################
---

# Lesson 3, additional exercises

#### Lists

We'll cover lists later in lesson 11, but let's already take a brief look.

A list is a series of elements bound together, where each element can have a value. They are defined as follows:

```
numbers = [1,2,3]
fruits = ['apples', 'pears', 'oranges']
physical_constants = ['pi', 3.14, 'c', 299_792_458, 'mole', 6.022e23]
```

Elements can be accessed the same way as we saw with strings.

#### A

What will `numbers[1]` return? And `physical_constants[2:4]`?

#### B

What is the type of 
- `numbers`?
- `numbers[1]`?
- `physical_constants`?
- `physical_constants[1]`?
- `physical_constants[2]`?
- `physical_constants[3]`?
- `fruits`?
- `fruits[1]`?

#### C

Can the elements in a list have different types? (This can be seen from the previous answer.)

#### np.array

Lists can be a useful tool, but for example in image analysis, don't offer the full mathematical options one might like. `numpy` arrays introduce a new type of series, in which you can do more manipulations. See some examples below:

```Python
import numpy as np
my_array = [1,2,3,5]
my_array_np = np.array([1,2,3,5])

# what's the difference here:
# my_array+1 # commented because gives error, why?
my_array_np+1

# what's the difference here:
my_array * 3
my_array_np * 3

# more:
my_array + [1,2,3,4]
my_array_np + np.array([1,2,3,4])
np.sin(my_array_np)

# numpy-specific things, what is happening?
my_array_np[range(1,4,2)]
my_array_np[my_array_np>1]

# Can numpy arrays have different types?
# What is the type of the elements in these two arrays?
np.array([1,2,3,'4'])
np.array([1,2,3,'hello'])
```

#### Dict

Python has more types. A `dict` is sometimes very convenient, and is also used later with creating tables.

```Python
experimental_replicate_list = {'WT': 12, 'mut': 32, 'WT.cond1': 10, 'mut.cond1': 12}
print(experimental_replicte_list)

print(experimental_replicate_list['WT'])

# Exercise:
# Edit the following code such that we get replicate numbers for conditions involving WT
my_keys = experimental_replicate_list.keys()
print(my_keys)
my_keys_of_interest = [the_key for the_key in my_keys if 'mut' in the_key] # edit this line
print(my_keys_of_interest)
print([experimental_replicate_list[sel_key] for sel_key in my_keys_of_interest])

# The above code uses several lines, can you do this in one line?
print(...) # edit this line
```

### Special maths (Carpentries)

In Python 3, the `//` operator performs integer (whole-number) floor division, the `/` operator performs floating-point division, and the `%` (or modulo) operator calculates and returns the remainder from integer division:

```Python
print('5 // 3:', 5 // 3)
print('5 / 3:', 5 / 3)
print('5 % 3:', 5 % 3)
```

```
OUTPUT:
5 // 3: 1
5 / 3: 1.6666666666666667
5 % 3: 2
```

If num_subjects is the number of subjects taking part in a study, and num_per_survey is the number that can take part in a single survey, write an expression that calculates the number of surveys needed to reach everyone once.

### Complex numbers (Carpentries)

Python provides complex numbers, which are written as 1.0+2.0j. If val is a complex number, its real and imaginary parts can be accessed using dot notation as val.real and val.imag.

```Python
a_complex_number = 6 + 2j
print(a_complex_number.real)
print(a_complex_number.imag)
```

##### Questions:
1. Why do you think Python uses j instead of i for the imaginary part?
2. What do you expect 1 + 2j + 3 to produce?
3. What do you expect 4j to be? What about 4 j or 4 + j?

############################################################
---

# Exercises Lesson 4, functions (1)

## Exercises

#### Order

- Explain in simple terms the order of operations in the following program: when does the addition happen, when does the subtraction happen, when is each function called, etc.
- What is the final value of radiance?

```Python
radiance = 1.0
radiance = max(2.1, 2.0 + min(radiance, 1.1 * radiance - 0.5))
```

#### Last string character

If Python starts counting from zero, and len returns the number of characters in a string, what index expression will get the last character in the string name? (Note: we will see a simpler way to do this in a later episode.)

############################################################
---

# Additional exercises Lesson 4

#### Why not?

Why is it that max and min do not return None when they are called with no arguments?

#### Spot the difference

Predict what each of the print statements in the program below will print.
Does max(len(rich), poor) run or produce an error message? If it runs, does its result make any sense?

```Python
easy_string = "abc"
print(max(easy_string))
rich = "gold"
poor = "tin"
print(max(rich, poor))
print(max(len(rich), len(poor)))
```

############################################################
---

*(Lesson 5 is a break.)*

############################################################
---

# Exercises Lesson 6, libraries

# Exercises

#### Explore

- What function from the math module can you use to calculate a square root without using sqrt?
- Since the library contains this function, why does sqrt exist?

#### Find the right module

You want to select a random character from a string:

```Python
bases = 'ACTTGCTTGAC'
```

- Which standard library module could help you?
- Which function would you select from that module? Are there alternatives?
- Try to write a program that uses the function.


#### Help!

When a colleague of yours types help(math), Python reports an error:

```
NameError: name 'math' is not defined
```

What has your colleague forgotten to do?

#### Importing with aliases

- Fill in the blanks so that the program below prints 90.0.
- Rewrite the program so that it uses import without as.
- Which form do you find easier to read?

```Python
import math as m
angle = ____.degrees(____.pi / 2)
print(____)
```

#### Multiple ways of importing

Match the following print statements with the appropriate library calls.

Print commands:

- `print("sin(pi/2) =", sin(pi/2))`
- `print("sin(pi/2) =", m.sin(m.pi/2))`
- `print("sin(pi/2) =", math.sin(math.pi/2))`

Library calls:

- `from math import sin, pi`
- `import math`
- `import math as m`
- `from math import *`


############################################################
---

# Additional Exercises Lesson 6, Libraries

#### "Jigsaw": progamming example

Rearrange the following statements so that a random DNA base is printed and its index in the string. Not all statements may be needed. Feel free to use/add intermediate variables.

```Python
bases="ACTTGCTTGAC"
import math
import random
___ = random.randrange(n_bases)
___ = len(bases)
print("random base ", bases[___], "base index", ___)
```

#### Importing specific items

- Fill in the blanks so that the program below prints 90.0.
- Do you find this version easier to read than preceding ones?
- Why wouldn’t programmers always use this form of import?

```Python
____ math import ____, ____
angle = degrees(pi / 2)
print(angle)
```

#### Reading error messages

Read the code below and try to identify what the errors are without running it.
Run the code, and read the error message. What type of error is it?

```Python
from math import log
log(0)
```

# Exercises for fast participants

#### Write your own

When you have a notebook file, you can also create another file, with a .py extension, and write functions in that file. The .py file can be imported like a library, and the functions in the file can be used as if they came from a library.

##### Exercise

Using the information below, try to 
- create two files, one `.ipynb` (notebook) file and one `.py` (python plain text code) file.
- rename the `myfunctionname` functions in the `.py` file and use them in the notebook.
- create a third function, which returns C when you provide A and B, assuming `A^2+B^2 = C^2`, and use it in your notebook.

Useful things to know:
- You can also make `.py` files. Unlike notebooks, every text here is assumed to be python code.
- *For Jypiter notebooks*: 
    - You can make a .py file with `file > new > python file`.        
        - Save the file to `myfilename.py` (replacing myfilename with your own favorite name).
- *For Google colabs: 
    - To create a `.py` file, right click in the file overview (where you also put the gapminder `.csv` files), and select 'new file'. Then create a file 'myfilename.py' and double click to edit it.*
- You can import your file in a python notebook using:
    - `import myfilename` where `myfilename.py` should exist and hold your code. You can also put your file in a directory, but then you need to import it like `import mydirectoryname.myfilename`.

You can write a function using the following template:

```Python

def myfunctionname():
    print("hello world")
    
def myfunctionname2(input1, input2):
    print("input 1 = ", input1, ', input 2 = ', input2)

```

############################################################
---

# Exercises lesson 7, dataframes (1)

#### Reading other data

Read the data in gapminder_gdp_americas.csv (which should be in the same directory as gapminder_gdp_oceania.csv) into a variable called data_americas and display its summary statistics.

#### Inspecting data

After reading the data for the Americas, use help(data_americas.head) and help(data_americas.tail) to find out what DataFrame.head and DataFrame.tail do.

- What method call will display the first three rows of this data?
- What method call will display the last three columns of this data? (Hint: you may need to change your view of the data.)


#### Navigating directories

The data for your current project is stored in a file called microbes.csv, which is located in a folder called field_data. You are doing analysis in a notebook called analysis.ipynb in a sibling folder called thesis:

```
your_home_directory
+-- field_data/
|   +-- microbes.csv
+-- thesis/
    +-- analysis.ipynb
```

What value(s) should you pass to read_csv to read microbes.csv in analysis.ipynb?

#### Writing data

As well as the read_csv function for reading data from a file, Pandas provides a to_csv function to write dataframes to files. Applying what you’ve learned about reading from files, write one of your dataframes to a file called processed.csv. You can use help to get information on how to use to_csv.

##################################################
---

# Additional exercises for Lesson 7, dataframes (1)

## Exercises for fast participants

- Create a plain text file on your computer, and give it the extension `.csv`.
- Find out what the comma-separated format looks like.
- Use your imagination to complete the following table and put it in the `.csv` file. 

|replicate| cond1   |  cond2 |
|---|---|---|
|   | 10  |   |
|   | 11 |   |
|   | 10  |   |
|   | 12  |   |
|   | 13  |   |
|   | 13  |   |

- Now try to read in that table in your python notebook.
- Get the following code to run on your dataframe (referred to as `df` below):
```python
from scipy.stats import ttest_ind
t_stat, p_value = ttest_ind(df['cond1'], df['cond2'])
print(f"T-statistic: {t_stat}, P-value: {p_value}")
```
- What does that code do? 
- Let's do some unethical data massaging, and tweak the csv such that you get a significant p-val.

##################################################
---

# Exercises for lesson 8, dataframes (2)

### Selection individual values

Import data for europe:

```
import pandas as pd
data_europe = pd.read_csv('data/gapminder_gdp_europe.csv', index_col='country')
```

Find the GDP Capita of Serbia in 2007.

### Extent of slicing

- Do the two statements below produce the same output?
- Based on this, what rule governs what is included (or not) in numerical slices and named slices in Pandas?

```python
print(data_europe.iloc[0:2, 0:2])
print(data_europe.loc['Albania':'Belgium', 'gdpPercap_1952':'gdpPercap_1962'])
```

### Reconstructing Data

Explain what each line in the following short program does: what is in first, second, etc.?

```python
first = pd.read_csv('data/gapminder_all.csv', index_col='country')
second = first[first['continent'] == 'Americas']
third = second.drop('Puerto Rico')
fourth = third.drop('continent', axis = 1)
fourth.to_csv('result.csv')
```

### Selecting Indices

Explain in simple terms what idxmin and idxmax do in the short program below. When would you use these methods?

```python
data = pd.read_csv('data/gapminder_gdp_europe.csv', index_col='country')
print(data.idxmin())
print(data.idxmax())
```

### Practice with Selection

Assume Pandas has been imported and the Gapminder GDP data for Europe has been loaded. Write an expression to select each of the following:

- GDP per capita for all countries in 1982.
- GDP per capita for Denmark for all years.
- GDP per capita for all countries for years after 1985.
- GDP per capita for each country in 2007 as a multiple of GDP per capita for that country in 1952.

### Many Ways of Access

There are at least two ways of accessing a value or slice of a DataFrame: by name or index. However, there are many others. For example, a single column or row can be accessed either as a DataFrame or a Series object.

Suggest different ways of doing the following operations on a DataFrame:

- Access a single column
- Access a single row
- Access an individual DataFrame element
- Access several columns
- Access several rows
- Access a subset of specific rows and columns
- Access a subset of row and column ranges

##################################################
---

# Additional exercises Lesson 8, dataframes (2)

### Gene expression (bioDSC)

- Convert the data below to a csv file, import it to a pandas df, and determine the following:
    - The average CRP gene expression per condion.
    - The corresponding standard deviations.
    - The log2-fold change between WT, condition A, and condition B.
    - Do the same for ACTA1.
    - Normalize all gene expression levels to their average respective wild type levels.

```
gene	expression	condition
CRP	873	WT
CRP	324	WT
CRP	214	WT
CRP	151	WT
CRP	1220	A
CRP	450	A
CRP	300	A
CRP	210	A
CRP	800	B
CRP	200	B
CRP	200	B
CRP	130	B
ACTA1	7457	WT
ACTA1	2342	WT
ACTA1	8000	WT
ACTA1	9000	WT
ACTA1	6500	A
ACTA1	2200	A
ACTA1	7500	A
ACTA1	8000	A
ACTA1	1000	B
ACTA1	1123	B
ACTA1	3211	B
ACTA1	1231	B
```

### GDPs (bioDSC)

- Between '87 and '92 the GDP of most countries took a hit. Are there any countries which had a positive increase between those two years? Which ones?
- Calculate the average GDP between all European countries per year.
    - Normalize the dataframe by this trend.


### Exploring available methods using the dir() function

Python includes a dir() function that can be used to display all of the available methods (functions) that are built into a data object. In Episode 4, we used some methods with a string. But we can see many more are available by using dir():

```python
my_string = 'Hello world!'   # creation of a string object 
dir(my_string)
```

This command returns:

```python
['__add__',
...
'__subclasshook__',
'capitalize',
'casefold',
'center',
...
'upper',
'zfill']
```

You can use help() or Shift+Tab to get more information about what these methods do.

Assume Pandas has been imported and the Gapminder GDP data for Europe has been loaded as data. Then, use dir() to find the function that prints out the median per-capita GDP across all European countries for each year that information is available.

### Interpretation

Poland’s borders have been stable since 1945, but changed several times in the years before then. How would you handle this if you were creating a table of GDP per capita for Poland for the entire twentieth century?

##################################################
---

# Exercises Lesson 9, plotting

!To do!

##################################################
---

*(Lesson 10 is a break.)*

##################################################
---

# Exercises Lesson 11, Lists

### Fill in the blanks

Fill in the blanks so that the program below produces the output shown.

```python
values = ____
values.____(1)
values.____(3)
values.____(5)
print('first time:', values)
values = values[____]
print('second time:', values)
```

Output:
```
first time: [1, 3, 5]
second time: [3, 5]
```

### How Large is a Slice?

If start and stop are both non-negative integers, how long is the list values[start:stop]?

### From Strings to Lists and Back

Given this:

```python
print('string to list:', list('tin'))
print('list to string:', ''.join(['g', 'o', 'l', 'd']))
```

OUTPUT:
```
string to list: ['t', 'i', 'n']
list to string: gold
```

- What does list('some string') do?
- What does '-'.join(['x', 'y', 'z']) generate?

### Working With the End

What does the following program print?

```python
element = 'helium'
print(element[-1])
```

- How does Python interpret a negative index?
- If a list or string has N elements, what is the most negative index that can safely be used with it, and what location does that index represent?
- If values is a list, what does del values[-1] do?
- How can you display all elements but the last one without changing values? (Hint: you will need to combine slicing and negative indexing.)

### Stepping Through a List

What does the following program print?

```python
element = 'fluorine'
print(element[::2])
print(element[::-1])
```

- If we write a slice as low:high:stride, what does stride do?
- What expression would select all of the even-numbered items from a collection?

##################################################
---

# Additional Exercises Lesson 11, Lists

### Slice Bounds

What does the following program print?

```python
element = 'lithium'
print(element[0:20])
print(element[-1:3])
```

### Sort and Sorted

What do these two programs print? In simple terms, explain the difference between sorted(letters) and letters.sort().

```python
# Program A
letters = list('gold')
result = sorted(letters)
print('letters is', letters, 'and result is', result)
```

```python
# Program B
letters = list('gold')
result = letters.sort()
print('letters is', letters, 'and result is', result)
```

### Copying (or Not)
What do these two programs print? In simple terms, explain the difference between new = old and new = old[:].

```python
# Program A
old = list('gold')
new = old      # simple assignment
new[0] = 'D'
print('new is', new, 'and old is', old)
```

```python
# Program B
old = list('gold')
new = old[:]   # assigning a slice
new[0] = 'D'
print('new is', new, 'and old is', old)
```

### Go to lesson 3 (bioDSC)

- Do the additional exercises of lesson 3 if you haven't already.

### Negative slicing (bioDSC)

```python
element = 'lithium'
```

What does `element[-7:3]` print and why?

**Explanation:** https://www.geeksforgeeks.org/slicing-with-negative-numbers-in-python/

### More list comprehensions and filtering (bioDSC)

- Edit the following code such that the list consists of values `2x+x^2-1` where x is the index of the list element.

`[x for x in range(10)]`

- Now from that list, select values that are > 10, by modifying the following code:

`[x for x in your_list if ______]`

- Convert your list to a np.array, and do the same in a more elegant way.

- Given: `list_withtop = [1000+-10*(x-7)**2 for x in range(20)]`
    - Find the position of the maximum value in this array.
    - Edit the code above such that the maximum value shifts to an index of your choice.   
        - Check whether you succeedded by finding the maximum value.
    - Multiply your list with `-1`, and put the result in another list.
        - Where are now the maximum and minimum values?
        - Does this make sense?
    - `list_line = [70*x-1000 for x in range(20)]`
        - What's the biggest value, either negative or positive, in this list?
        - And the index of that number?
        - What's the standard deviation?
        - Can you calculate the correlation between list_withtop and list_line?
        - Can you make a scatter plot of  list_withtop versus list_line?


##################################################
---

# Exercises Lesson 12, Loops

### Tracing Execution

Create a table showing the numbers of the lines that are executed when this program runs, and the values of the variables after each line is executed.

```python
total = 0
for char in "tin":
    total = total + 1
```

|Step  | Line Number | Variable Values       |
|------|-------------|-----------------------|
|1 | 1           | total = 0             |
|2 | ..           | total = 0, char = 't' |
|3 | ..           | .. |
|4 | ..           | .. |
|5 | ..           | .. |
|.. | ..           | .. |


### Practice Accumulating
Fill in the blanks in each of the programs below to produce the indicated result.

```python
# Total length of the strings in the list: ["red", "green", "blue"] => 12
total = 0
for word in ["red", "green", "blue"]:
    ____ = ____ + len(word)
print(total)
```

### Practice Accumulating 2 (continued)

```python
# List of word lengths: ["red", "green", "blue"] => [3, 5, 4]
lengths = ____
for word in ["red", "green", "blue"]:
    lengths.____(____)
print(lengths)
```

### Practice Accumulating 3 (continued)

```python
# Concatenate all words: ["red", "green", "blue"] => "redgreenblue"
words = ["red", "green", "blue"]
result = ____
for ____ in ____:
    ____
print(result)
```

##################################################
---

# Additional Exercises Lesson 12, Loops

### Reversing a String

Fill in the blanks in the program below so that it prints “nit” (the reverse of the original character string “tin”).

```
original = "tin"
result = ____
for char in original:
    result = ____
print(result)
```

**bioDSC hint**
If this is challenging: 
- try to first reproduce the word tin in result, using this loop. 
- Use a similar approach as the examples we used.


### Practice Accumulating (continued from above)

Create an acronym: Starting from the list ["red", "green", "blue"], create the acronym "RGB" using a for loop.

- **bioDSC remark**: Note the capitals in "RGB"!
- **Hint**: You may need to use a string method to properly format the acronym.

### Identifying Item Errors

- Read the code below and try to identify what the errors are without running it.
- Run the code, and read the error message. What type of error is it?
- Fix the error.

```python
seasons = ['Spring', 'Summer', 'Fall', 'Winter']
print('My favorite season is ', seasons[4])
```

### Cumulative Sum (code puzzle)

Reorder and properly indent the lines of code below so that they print a list with the cumulative sum of data. The result should be [1, 3, 5, 10].

```python
cumulative.append(total)
for number in data:
cumulative = []
total = total + number
total = 0
print(cumulative)
data = [1,2,2,5]
```

### Identifying Variable Name Errors

- Read the code below and try to identify what the errors are without running it.
- Run the code and read the error message. What type of NameError do you think this is? Is it a string with no quotes, a misspelled variable, or a variable that should have been defined but was not?
- Fix the error.
- Repeat steps 2 and 3, until you have fixed all the errors.

```python
for number in range(10):
    # use a if the number is a multiple of 3, otherwise use b
    if (Number % 3) == 0:
        message = message + a
    else:
        message = message + "b"
print(message)
```

### Classifying Errors

Is an indentation error a syntax error or a runtime error?

##################################################
---

# Exercises Lesson 13, Conditionals

### Tracing Execution

What does this program print?

```python
pressure = 71.9
if pressure > 50.0:
    pressure = 25.0
elif pressure <= 50.0:
    pressure = 0.0
print(pressure)
```

### Trimming Values

Fill in the blanks so that this program creates a new list containing zeroes where the original list’s values were negative and ones where the original list’s values were positive.

```python
original = [-1.5, 0.2, 0.4, 0.0, -1.3, 0.4]
result = ____
for value in original:
    if ____:
        result.append(0)
    else:
        ____
print(result)
```

Desired output:
```
[0, 1, 1, 1, 0, 1]
```

### Processing Small Files

Modify this program so that it only processes files with fewer than 50 records.

```python
import glob
import pandas as pd
for filename in glob.glob('data/*.csv'):
    contents = pd.read_csv(filename)
    ____:
        print(filename, len(contents))
```        


##################################################
---

# Additional Exercises Lesson 13, Conditionals

### List comprehension (bioDSC)

#### A

Adapt the following code to select only positive values:

```python
example_list = [1,2,3,4,-5,1,34,6,-10, 39]
example_list_pos = [___ for item in example_list if ___]
print(example_list_pos)
```

#### B

Use the same code, but:
- select values between 30 and 40
- select items <0 or >10

#### C

Use a np.array (see additional exercises Lesson 3) to do the same more elegantly.

### Enumerate, zip (bioDSC)

These exercises introduce two new concepts. 
You might need google.

#### A

What does the following code do? What is the meaning of the output?

```
for idx, item in enumerate([1,2,3,4,-5,1,34,6,-10]):
    
    if item>5:
        print(idx)
```

#### B

Modify the following code such that it will compare each item i in apples with each item i in pears, and tell you which one is heavier.
You need to edit the code.

```
apples = [123, 436, 123, 654, 117, 193, 120]
pears  = [543, 163, 178, 165, 123, 187, 190]

for apple_weight, pear_weight in zip(apples, pears):
    print('='*10)
    print('weigth apple: ', apple_weight)
    print('weigth pear: ',pear_weight)
    
    print('the XXX is heavier')
```


### Initializing

Modify this program so that it finds the largest and smallest values in the list no matter what the range of values originally is.

```python
values = [...some test data...]
smallest, largest = None, None
for v in values:
    if ____:
        smallest, largest = v, v
    ____:
        smallest = min(____, v)
        largest = max(____, v)
print(smallest, largest)
```

What are the advantages and disadvantages of using this method to find the range of the data?


**bioDSC hints**

The loop could also look as follows:

```python
values = [...some test data...]
smallest, largest = None, None
for v in values:
    smallest = min(____, v)
    largest = max(____, v)
```

Why wouldn't this work?

This is why the if statement is needed. 

How can we test whether we are in the first iteration?






##################################################
---

# Exercises Lesson 14, Looping over data

### Determining Matches

Which of these files is not matched by the expression glob.glob('data/*as*.csv')?

```
data/gapminder_gdp_africa.csv
data/gapminder_gdp_americas.csv
data/gapminder_gdp_asia.csv
```

### Minimum File Size

Modify this program so that it prints the number of records in the file that has the fewest records.

```python
import glob
import pandas as pd
fewest = ____
for filename in glob.glob('data/*.csv'):
    dataframe = pd.____(filename)
    fewest = min(____, dataframe.shape[0])
print('smallest file has', fewest, 'records')
```

Note that the DataFrame.shape() method returns a tuple with the number of rows and columns of the data frame.

##################################################
---

# Additional Exercises Lesson 14, Looping over data

### Comparing Data

Write a program that reads in the regional data sets and plots the average GDP per capita for each region over time in a single chart. 

Pandas will raise an error if it encounters non-numeric columns in a dataframe computation so you may need to either filter out those columns or tell pandas to ignore them.


##################################################
---

*(Lesson 15 is a break.)*

##################################################
---

# Exercises Lesson 16, Functions

### Identifying Syntax Errors

Read the code below and try to identify what the errors are without running it.
Run the code and read the error message. Is it a SyntaxError or an IndentationError?
Fix the error.

```
def another_function
  print("Syntax errors are annoying.")
   print("But at least python tells us about them!")
  print("So they are usually not too hard to fix.")
```

### What does the following program print?

```python
def report(pressure):
    print('pressure is', pressure)

print('calling', report, 22.5)
```

### Encapsulation

Fill in the blanks to create a function that takes a single filename as an argument, loads the data in the file named by the argument, and returns the minimum value in that data.

```python
import pandas as pd

def min_in_data(____):
    data = ____
    return ____
```

##################################################
---

# Additional Exercises Lesson 16, Functions

### Order of Operations

What’s wrong in this example?

```python
result = print_time(11, 37, 59)

def print_time(hour, minute, second):
   time_string = str(hour) + ':' + str(minute) + ':' + str(second)
   print(time_string)
```

After fixing the problem above, explain why running this example code:

```PYTHON
result = print_time(11, 37, 59)
print('result of call is:', result)
```

gives this output:

```
11:37:59
result of call is: None
```

Why is the result of the call None?


### Find the First

Fill in the blanks to create a function that takes a list of numbers as an argument and returns the first negative value in the list. What does your function do if the list is empty? What if the list has no negative numbers?

```python
def first_negative(values):
    for v in ____:
        if ____:
            return ____
```

### Calling by Name
Earlier we saw this function:

```python
def print_date(year, month, day):
    joined = str(year) + '/' + str(month) + '/' + str(day)
    print(joined)
```

We saw that we can call the function using named arguments, like this:
```python
print_date(day=1, month=2, year=2003)
```

- What does `print_date(day=1, month=2, year=2003)` print?
- When have you seen a function call like this before?
- When and why is it useful to call functions this way?

### Omitted exercises

Continue with more exercises at:
https://swcarpentry.github.io/python-novice-gapminder/instructor/16-writing-functions.html

(See: "Encapsulation of an If/Print Block".)

### Primes

Write a function that looks as follows:
```
def calculate_primes(N):
    ...
```
that returns an array with prime numbers between 0 and N.

Hints:
- Start with writing a function `is_number_prime(X)`, that checks whether $X$ is a prime number.
- You probably need the following ingredients for that function: 
    - How to test if a number is divisible by any number?
    - Use a for loop to test whether $X$ can be divided by all numbers $<X$.
    - Could be convenient to make smart use of the `return` function.
    
```
def is_number_prime(X):
    
    # <insert explanatory comment>
    for y in range(X):
    
        # <insert explanatory comment>
        if ...:
            return False
    
    # <insert explanatory comment>
    return True

def calculate_primes(N):
    ...
```

