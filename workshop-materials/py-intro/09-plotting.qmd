

::: {.callout-note}
## Note
Most questions originate from the carpentry lesson ["Plotting and Programming in Python"](http://swcarpentry.github.io/python-novice-gapminder/)
:::
---

# Exercises Lesson 9, plotting

### Minima and Maxima 
::: {#question-minmax .callout-tip icon='false'}
## Question A
Fill in the blanks below to plot the minimum GDP per capita over time for all the countries in Europe. 

Modify it again to plot the maximum GDP per capita over time for Europe, you need to edit the code beyond the `___` for this.

```python
data_europe = pd.read_csv('data/gapminder_gdp_europe.csv', index_col='country')
data_europe_transposed = data_europe.T

data_europe_transposed['min'] = data_europe.____
data_europe_transposed['max'] = ____
data_europe_transposed['year'] = ____

sns.lineplot(data_europe_transposed, x='year', y='min')
sns.lineplot(data_europe_transposed, x='year', y='max')
plt.legend(loc='best')
plt.xticks(rotation=90)
```

HINT: if you don't see the solution, take it step by step. Break down the task in subtasks, and adress the first step towards the solution first. Try that first. Running code is free.
:::


::: {.callout-caution collapse='true' icon='false'}
## Answer

```python
data_europe = pd.read_csv('data/data/gapminder_gdp_europe.csv', index_col='country')
data_europe_transposed = data_europe.T

data_europe_transposed['min'] = data_europe.min()
data_europe_transposed['max'] = data_europe.max()
data_europe_transposed['year'] = data_europe_transposed.index.str.replace("gdpPercap_","")

sns.lineplot(data_europe_transposed, x='year', y='min')
sns.lineplot(data_europe_transposed, x='year', y='max')
plt.legend(loc='best')
plt.xticks(rotation=90)
```
:::



### Mean gene expression

Use the kohela data again:

```python
# Load data, note the ".T" at the end here
df_kohela = pd.read_csv('data/kohela-et-al.csv', index_col=0).T
# create new 'masks'
epicardial_cells = df_kohela['WT1']>3
fibroblast_cells = df_kohela['COL2A1']>30
fat_cells = df_kohela['PPARG']>2
# Add cell type
df_kohela['Celltype'] = 'unknown'
df_kohela.loc[epicardial_cells,'Celltype'] = 'epicardial'
df_kohela.loc[fibroblast_cells, 'Celltype'] = 'fibroblast'
df_kohela.loc[fat_cells, 'Celltype'] = 'fat'
# Add conditions
df_kohela['Condition'] = 'unknown'
df_kohela.loc[df_kohela.index.str.contains('WT_'), 'Condition'] = 'WT'
df_kohela.loc[df_kohela.index.str.contains('mutant_'), 'Condition'] = 'mutant'
```

::: {.callout-tip icon='false'}
## Question B
Use seaborn to create a 'stripplot' plot for WT1 expression per cell type. Then create a similar plot for TBX18. (Epicardial cell markers.)
What information can be extracted from this plot?
:::
::: {.callout-caution collapse='true' icon='false'}
## Answer
```python
sns.stripplot(df_kohela, x='Celltype', y='TBX18', jitter=True, color='red')
sns.stripplot(df_kohela, x='Celltype', y='WT1', jitter=True, color='blue')
```
The plot shows that the expression in the epicardial and unknown types is the largest and that comparatively the fat and fibroblasts have low expression levels.
:::




::: {.callout-tip icon='false'}
## Question C
Now create a scatter plot, showing WT1 expression vs. TBX18 expression across all cells.
What does this tell us?
:::
::: {.callout-caution collapse='true' icon='false'}
## Answer
```python
sns.scatterplot(df_kohela, x='WT1', y='TBX18')
```
From the plot it is clear that there is no correlation between the two expression levels.

:::



::: {.callout-tip icon='false'}
## Question D, CHECK fibroblasts & fatty cells. There are almost not visible
Color the scatter plot per cell type.
What does this tell us?
:::
::: {.callout-caution collapse='true' icon='false'}
## Answer
```python
sns.scatterplot(df_kohela, x='WT1', y='TBX18', hue='Celltype')
```
Most of the cells are of epicardial or unknown type. In both cases there is no clear correlation. The others cells types are too few or are obfuscated by the other points.
:::


<!--
::: {.callout-tip icon='false'}
## Question E
1. Calculate the total RNA-seq reads per cell, and make a violin plot per condition for these total reads.

Some code to start with:
```python
df_kohela['Total_reads'] = df_kohela.loc[:,'A1BG':'ZZZ3']._.____
```

2. What does the violin plot tell us?

:::

::: {.callout-caution collapse='true' icon='false'}
## Answer

1. ```python
df_kohela['Total_reads'] = df_kohela.loc[:,'A1BG':'ZZZ3'].sum(axis=1)
```
2. ```python
sns.violinplot(df_kohela,x='Celltype',y='Total_reads')
```
This plot tells us that for each cell type the average total number of reads are comparable. However, there are some fibrobblast cells that show a very large read-count. Perhaps remove them or look closer which genes are responsible for this?
:::
-->

### More Correlations

This short program creates a plot showing the correlation between GDP and life expectancy for 2007, normalizing marker size by population:

```Python
data_all = pd.read_csv('data/gapminder_all.csv', index_col='country')
sns.scatterplot(data_all, x='gdpPercap_2007', y='lifeExp_2007', s=data_all['pop_2007']/1e6)
```
::: {.callout-tip icon='false'}
## Question F
Using online help and other resources, explain what each argument to plot does.
:::
::: {.callout-caution collapse='true' icon='false'}
## Answer

:::





---
# Additional Exercises


### Even more correlations 

::: {.callout-tip icon='false'}
## Question G

Use the code from the "More Correlations" exercise, and try to add the following lines to the plotting code:

```Python
plt.text(data_all.loc['United States','gdpPercap_2007'], data_all.loc['United States','lifeExp_2007'], 'United States')
plt.text(data_all.loc['Netherlands','gdpPercap_2007'], data_all.loc['Netherlands','lifeExp_2007'], 'Netherlands')
```

- What's happening here? (You might need to use Google.)
- Add your favorite country too.
:::

::: {.callout-caution collapse='true' icon='false'}
## Answer

:::


::: {.callout-tip icon='false'}
## Question H

How would you add labels for the top 10 GDP countries?
:::


::: {.callout-caution collapse='true' icon='false'}
## Answer
This would be very tedious with what you learned currently! In the next lessons (particularly lesson 12), we'll learn how to automate your code. This will be very useful for this particular challenge.
:::


### Subselection and melting

::: {.callout-tip icon='false'}
## Question I
Using the kohela data, first create a new dataframe `df_kohela_sel` with only a selection of a few genes, and the condition and cell type columns.

Select the following genes: `['WT1', 'TBX18', 'TFAP2A', 'COL2A1', 'ACTA2', 'PPARG', 'CEBPA']`. These are epicardial markers (WT1, TBX18), a transcription factor (TFAP2A), fibroblast markers (COL2A1, ACTA2), and fat markers (PPARG, CEBPA).
:::
::: {.callout-caution collapse='true' icon='false'}
## Answer
df_kohela_sel = df_kohela.loc[:,['WT1', 'TBX18', 'TFAP2A', 'COL2A1', 'ACTA2', 'PPARG', 'CEBPA','Celltype','Condition']]
:::
::: {.callout-tip icon='false'}
## Question J

Now melt this dataframe using `pd.melt()`, and use cell type and condition as identifier variables.
What will happen to the gene expression values?
What is sensible input for the `var_name` and `value_name` parameters?
Why is this useful? (For answer, see next questions.)
:::

::: {.callout-caution collapse='true' icon='false'}
## Answer
df_kohela_melted = pd.melt(df_kohela_sel, id_vars=['Celltype','Condition'], var_name='Gene', value_name='Expression')
:::

::: {.callout-tip icon='false'}
## Question K, Is this a question?
Use `df_kohela_melted.head()` to check whether the output is as expected.
:::
::: {.callout-caution collapse='true' icon='false'}
## Answer
:::



::: {.callout-tip icon='false'}
## Question L
Make a violin or stripplot, with as x-axis the genes, expression on the y-axis, and colored for condition.
Is there an issue with this plot?
:::

::: {.callout-caution collapse='true' icon='false'}
## Answer
sns.violinplot(df_kohela_melted, x='Gene', y='Expression', hue='Condition')
:::

::: {.callout-tip icon='false'}
## Question M

Look at the following example:

```Python
import numpy as np

# A custom function, which normalizes a series by its mean
# We'll learn more about functions in Lesson 16
def gene_normalization(X):
    return X / np.mean(X)

# Create a subset of the data
cell_subset = ['mutant_rep1_cell174', 'WT_rep2_cell348', 'mutant_rep1_cell160',
       'WT_rep1_cell022', 'mutant_rep1_cell069']
gene_subset = ['WT1', 'TBX18', 'TFAP2A', 'COL2A1', 'ACTA2', 'PPARG', 'CEBPA']

# Normalize gene expression
df_kohela_subset2 = df_kohela.loc[cell_subset, gene_subset]
df_kohela_subset2_normalized = df_kohela_subset2.transform(gene_normalization)

# Print the result
print(df_kohela_subset2_normalized)
```

1. Check out what `gene_normalization(df_kohela_subset2['WT1'])` does.
2. What does the transform method do in the above code?

:::

::: {.callout-caution collapse='true' icon='false'}
## Answer

:::

::: {.callout-tip icon='false'}
## Question N

Edit the following code (replacing blanks by code) to normalize the gene expression by the total expression of each gene.
Hint: look at exercise E.

```Python
df_kohela_grouped = df_kohela_melted.groupby(_______)
df_kohela_melted['Expression_normalized'] = df_kohela_grouped['Expression']._______(gene_normalization)
```

Then, similar to D, plot the normalized gene expression using both the `sns.barplot` and `sns.stripplot`.
For the stripplot, use the additional parameter `dodge=True`.

The barplot looks nice, but does it contain all information?

::: 

::: {.callout-caution collapse='true' icon='false'}
## Answer
sns.barplot(df_kohela_melted, x='Gene', y='Expression_normalized', hue='Condition')
sns.stripplot(df_kohela_melted, x='Gene', y='Expression_normalized', hue='Condition', dodge=True)
:::


::: {.callout-tip icon='false'}
## Question O

Finally, you might want to change the order in these plots. Use the following line:

```python
df_kohela_melted['Condition'] = pd.Categorical(df_kohela_melted['Condition'], categories=['WT', 'mutant'], ordered=True)
```

And then run your plotting code again.
What has happened?

:::

::: {.callout-caution collapse='true' icon='false'}
## Answer
:::


### Saving your plot

You might want to save your plot.
You can use the `plt.savefig` function for this.


::: {.callout-note icon='false'}
## Exercise

Check out this code with some additional convenient options.
Change `'/your/location/your-filename.pdf'` to a convenient path where you save your figure.

```python
import matplotlib.pyplot as plt

# Bang Wong colorblind-friendly color scheme (https://www.nature.com/articles/nmeth.1618)
colors_bangwong = [
    "#E69F00",  # Orange
    "#56B4E9",  # Sky Blue
    "#009E73",  # Bluish Green
    "#F0E442",  # Yellow
    "#0072B2",  # Blue
    "#D55E00",  # Vermillion
    "#CC79A7",  # Reddish Purple
    "#000000"   # Black
]

plt.style.use('default')
fig, ax = plt.subplots(1,1, figsize=(10/2.54,10/2.54))
ax.plot([1,2,3,4], [1,4,9,16], linestyle='--', color=colors_bangwong[1], label=r'$x^2$')
ax.plot([1,2,3,4], [1,5,11,19], linestyle=':', color=colors_bangwong[2], label=r'$x^2+(x-1)$')
ax.legend()
ax.set_xlabel('X-axis', fontsize=12)
ax.set_ylabel('Y-axis', fontsize=12)
ax.set_title('Sample Plot', fontsize=12)
ax.legend(fontsize=12)
ax.tick_params(axis='both', which='major', labelsize=12)
plt.tight_layout()

plt.savefig('/your/location/your-filename.pdf', dpi=300, bbox_inches='tight')
plt.close(fig)

# Use this command to show the figure when not using (Jupyter) notebooks.
# plt.show()
```
:::




### Correlations 


::: {.callout-tip icon='false'}
## Question P

Modify the code from "Minima and Maxima" exercise (Exercise A) to create a scatter plot showing the relationship between the minimum and maximum GDP per capita across the countries in Asia, with each point in the plot corresponding to a year. What relationship do you see (if any)?
:::


::: {.callout-caution collapse='true' icon='false'}
## Answer
:::


### Correlations (continued) 
::: {.callout-note icon='false'}
## Exercise
You might note that the variability in the maximum is much higher than that of the minimum. Take a look at the maximum and the max indexes:

```python
data_asia = pd.read_csv('data/gapminder_gdp_asia.csv', index_col='country')

df_max_GDP = pd.DataFrame()
df_max_GDP['GDP_max'] = data_asia.max()
df_max_GDP['Year']    = data_asia.columns.str.replace('gdpPercap_','').astype(int)

plt.plot(df_max_GDP['Year'], df_max_GDP['GDP_max'])

print(data_asia.idxmax())
print(data_asia.idxmin())
```

:::

### Normalized dataframe



::: {.callout-tip icon='false'}
## Question Q
1. In the previous lesson about dataframes (in the additional exercises), we normalized the GDP data against the average trend. Plot the data from this normalized dataframe.
2.  Is this helpful in any way?

:::
::: {.callout-caution collapse='true' icon='false'}
## Answer
:::


### Crude

Crude oil prices can be found at:
https://www.eia.gov/dnav/pet/hist/LeafHandler.ashx?n=PET&s=F000000__3&f=A

This gives the data below:

```
Decade	Year-0	Year-1	Year-2	Year-3	Year-4	Year-5	Year-6	Year-7	Year-8	Year-9
  1850's										16.00
  1860's	9.59	0.49	1.05	3.15	8.06	6.59	3.74	2.41	3.62	5.64
  1870's	3.86	4.34	3.64	1.83	1.17	1.35	2.52	2.38	1.17	0.86
  1880's	0.94	0.92	0.78	1.10	0.85	0.88	0.71	0.67	0.65	0.77
  1890's	0.77	0.56	0.51	0.60	0.72	1.09	0.96	0.68	0.80	1.13
  1900's	1.19	0.96	0.80	0.94	0.86	0.62	0.73	0.72	0.72	0.70
  1910's	0.61	0.61	0.74	0.95	0.81	0.64	1.10	1.56	1.98	2.01
  1920's	3.07	1.73	1.61	1.34	1.43	1.68	1.88	1.30	1.17	1.27
  1930's	1.19	0.65	0.87	0.67	1.00	0.97	1.09	1.18	1.13	1.02
  1940's	1.02	1.14	1.19	1.20	1.21	1.22	1.41	1.93	2.60	2.54
  1950's	2.51	2.53	2.53	2.68	2.78	2.77	2.79	3.09	3.01	2.90
  1960's	2.88	2.89	2.90	2.89	2.88	2.86	2.88	2.92	2.94	3.09
  1970's	3.18	3.39	3.39	3.89	6.87	7.67	8.19	8.57	9.00	12.64
  1980's	21.59	31.77	28.52	26.19	25.88	24.09	12.51	15.40	12.58	15.86
  1990's	20.03	16.54	15.99	14.25	13.19	14.62	18.46	17.23	10.87	15.56
  2000's	26.72	21.84	22.51	27.56	36.77	50.28	59.69	66.52	94.04	56.35
  2010's	74.71	95.73	94.52	95.99	87.39	44.39	38.29	48.05	61.40	55.59
  2020's	36.86	65.84	93.97	76.10						
```

Save that data to a .tsv file, and upload it.

Now try to understand the code below:

```python
import pandas as pd

# Load the data
df_crudeoil = \
    pd.read_csv('data//crude_oil.tsv', sep='\t')

# reshape the data, such that it becomes a long list
df_crudeoil_melted = df_crudeoil.melt(id_vars='Decade', var_name='lastdigit')

# now reformat the year information
# search and replace first
df_crudeoil_melted.loc[:,'Decade'] = df_crudeoil_melted.loc[:,'Decade'].str.replace("0's",'')
df_crudeoil_melted.loc[:,'lastdigit'] = df_crudeoil_melted.loc[:,'lastdigit'].str.replace('Year-','')
# now combine information to create a new column "Year"
df_crudeoil_melted.loc[:,'Year'] = df_crudeoil_melted.loc[:,'Decade'] + df_crudeoil_melted.loc[:,'lastdigit']
# Inspect the result
print(df_crudeoil_melted.head())
```


::: {.callout-tip icon='false'}
## Question R
Using your new plotting skills, compare this data against the trends in the Asian GDPs showed earlier.
:::

::: {.callout-caution collapse='true' icon='false'}
## Answer
:::
