
::: {.callout-note}
## Credits & copyright
Many questions originate from the carpentry lesson ["Plotting and Programming in Python"](http://swcarpentry.github.io/python-novice-gapminder/), some were
authored by the *bio*DSC. Carpentries website materials are [licenced](https://software-carpentry.org/license/) under the [CC BY 4.0](https://creativecommons.org/licenses/by/4.0/),
which also applies to the contents of this website.
:::

---

# Exercises Lesson 2, variables


<!-- #################################################################################################################################### -->

### Order of things
<!--<div style="margin-top: -40px;" class="text-end">-->

::: {.callout-tip icon="false"}
## Question A
Fill the table showing the values of the variables in this program after each statement is executed.

```Python
# Command  # Value of x   # Value of y   # Value of swap #
x = 1.0    #              #              #               #
y = 3.0    #              #              #               #
swap = x   #              #              #               #
x = y      #              #              #               #
y = swap   #              #              #               #
```
:::

::: {.callout-caution collapse="true" icon="false"}
## Answer

| Command  | Value of x  | Value of y | Value of swap |
|----------|------------|----------|--------------|
| x = 1.0 | 1 | - | - |
| y = 3.0 | 1 | 3 | - |
| swap = x | 1 | 3 | 1 |
| x = y | 3|3|1|
| y = swap | 3 | 1 | 1|

:::

::: {.callout-tip icon="false"}
## Question B
What is the final value of position in the program below? (Try to predict the value without running the program, then check your prediction.)

```Python
initial = 'left'
position = initial
initial = 'right'
```
:::
::: {.callout-caution collapse="true" icon="false"}
## Answer
'left'
:::

<!-- #################################################################################################################################### -->

### Challenge

::: {.callout-tip icon="false"}
### Question
If you assign a = 123, what happens if you try to get the second digit of a via a[1]?
:::
::: {.callout-caution collapse="true" icon="false"}
## Answer
Numbers are not strings or sequences and Python will raise an error if you try to perform an index operation on a number. In the next lesson on types and type conversion we will learn more about types and how to convert between different types. If you want the Nth digit of a number you can convert it into a string using the str built-in function and then perform an index operation on that string.
```Python
a = 123
print(a[1])
```
TypeError: 'int' object is not subscriptable
```
a = str(123)
print(a[1])
```
:::

<!-- Carpentries credits -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: [Carpentries workshop materials](https://swcarpentry.github.io/python-novice-gapminder/02-variables.html){style="color: #777777" target=_blank}.</font>*
</div>

<!-- #################################################################################################################################### -->

### Slicing

<!-- REMOVED TO SAVE TIME
##### A

What does the following program print?

```
atom_name = 'carbon'
print('atom_name[1:3] is:', atom_name[1:3])
```

###### B
-->

::: {.callout-tip icon="false"}
## Question A

Given the following string:
```Python
species_name = "Acacia buxifolia"
```

What would these expressions return?

```Python
1. species_name[2:8]
2. species_name[11:] (without a value after the colon)
3. species_name[:4] (without a value before the colon)
4. species_name[:] (just a colon)
5. species_name[11:-3]
6. species_name[-5:-3]
```
:::
::: {.callout-caution collapse="true" icon="false"}
## Answer
```
species_name[2:8] returns the substring 'acia b'
species_name[11:] returns the substring 'folia', from position 11 until the end
species_name[:4] returns the substring 'Acac', from the start up to but not including position 4
species_name[:] returns the entire string 'Acacia buxifolia'
species_name[11:-3] returns the substring 'fo', from the 11th position to the third last position
species_name[-5:-3] also returns the substring 'fo', from the fifth last position to the third last

```
:::

::: {.callout-tip icon="false"}
## Question B
What happens when you choose a stop value which is out of range? (i.e., try species_name[0:20] or species_name[:103])
:::
::: {.callout-caution collapse="true" icon="false"}
## Answer
If a part of the slice is out of range, the operation does not fail. species_name[0:20] gives the same result as species_name[0:], and species_name[:103] gives the same result as species_name[:]
:::

<!-- Carpentries credits -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: [Carpentries workshop materials](https://swcarpentry.github.io/python-novice-gapminder/02-variables.html){style="color: #777777" target=_blank}.</font>*
</div>


<!-- #################################################################################################################################### -->
---

# Additional exercises 

### Naming
::: {.callout-tip icon="false"}
### Question 
Which is a better variable name, m, min, or minutes? Why? Hint: think about which code you would rather inherit from someone who is leaving the lab:

```Python
ts = m * 60 + s
tot_sec = min * 60 + sec
total_seconds = minutes * 60 + seconds
```
:::

::: {.callout-caution collapse="true" icon="false"}
## Answer
minutes is better because min might mean something like “minimum” (and actually is an existing built-in function in Python that we will cover later).
:::

<!-- Carpentries credits -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: [Carpentries workshop materials](https://swcarpentry.github.io/python-novice-gapminder/02-variables.html){style="color: #777777" target=_blank}.</font>*
</div>

<!-- #################################################################################################################################### -->

### Very challenging additional exercises 

::: {.callout-tip icon="false"}
### Question A

Try to find out what the following code does. 
Use Google or chatGPT if you don't know the answers.

Lists inside lists:
```Python
greetings_strings = ['hello', 'bye', 'later']
print(greetings_strings[0])
print(greetings_strings[1][2])
```
:::
::: {.callout-caution collapse="true" icon="false"}
## Answer
`greetings_strings` is a list. Lists and strings can be accessed in a similar way.

`print(greetings_strings[0])` prints the first element of the list `greetings_strings`, ie 'hello'.

`greetings_strings[1][2]` will access the 2nd element of the list `greetings_strings`, ie 'bye'.
The 3rd element of 'bye' can then be accessed by `[2]`. 
Therefor, the answer is 'e'.
:::

::: {.callout-tip icon="false"}

### Question B
Using a loops will be covered latered, list comprehensions are even a bit more advanced.
What does the following code do?
```
print([greetings_strings[idx] for idx in [0, 2]])
print([greetings_strings[0][idx] for idx in [0, 2, 4]])
print([greetings_strings[0][idx] for idx in range(0,4,2)])
``` 
:::
::: {.callout-caution collapse="true" icon="false"}
## Answer
`[greetings_strings[idx] for idx in [0, 2]]` will generate a new list.
It will make `idx` equal to 0 and 2, and create two corresponding entries in the new list.
Those entries are defined by the code before the keyword `for`, in this case `greetings_strings[idx]`.
The list will thus consist of `greetings_strings[0]` and `greetings_strings[2]`, ie `hello` and `later`.

`print([greetings_strings[0][idx] for idx in [0, 2, 4]])` does the same, but the list now constists of
`greetings_strings[0][0]`, `greetings_strings[0][2]` and `greetings_strings[0][4]`,
so `['h', 'l', 'o']`.

`range(0,4,2)` generates a `range`, and will result in `idx` to be set to the values 
0, 2 (importantly, not including 4).
The result thus is `['h', 'l']`.
:::

::: {.callout-tip icon="false"}
### Question C
What does the following code do?
(Types will be the topic of the next lesson.)
```
square_values = [number**2 for number in range(10)]
square_values_string = [str(number**2) for number in range(10)]
print(square_values)
print(square_values_string)
```
:::
::: {.callout-caution collapse="true" icon="false"}
## Answer
- Similar to above, in the first line, a list is created. `**2` results in the square of `number`. `number` will take 
values 0..9, and so the list looks like `[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]`.
- `str()` converts a number to a string. The list therefor now looks like `['0', '1', '4', '9', '16', '25', '36', '49', '64', '81']`.
:::

::: {.callout-tip icon="false"}
### Question D
What do `.join()` and `.replace()` do? We will delve into this syntax later.
```
species_name = "Acacia buxifolia"
print("".join([species_name[i] for i in range(10, 2, -1)]))
print(species_name.replace('Aca', 'Bole'))
```
:::
::: {.callout-caution collapse="true" icon="false"}
## Answer
- `.join()` pastes (joins) together elements of a list, and uses the string before the dot to put between the elements.
- `.replace()` performs replacement of text in the string given before the dot. Between the quotes are what to search for and what to replace it with, respectively.
:::

::: {.callout-tip icon="false"}
### Question E
Now combine the above to create a new list, where you remove all letters 'e' from the following list:
```
list_of_species = ['Homo sapiens', 'Escherichia Coli', 'Pan troglodytes', 'Canis lupus', 'Felis catus']
```
:::
::: {.callout-caution collapse="true" icon="false"}
## Answer
You can combine the above commands:
```
new_list = [X.replace('e','') for X in list_of_species]
print(new_list)
# result: ['Homo sapins', 'Eschrichia Coli', 'Pan troglodyts', 'Canis lupus', 'Flis catus']
```

:::


<!-- bioDSC credits -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: *bio*DSC.</font>*
</div>



