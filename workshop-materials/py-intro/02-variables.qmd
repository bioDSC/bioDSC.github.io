
############################################################
---

# Exercises Lesson 2, variables



### 1. Order of things
#### A
::: {.callout-tip icon="false"}
## Question
Fill the table showing the values of the variables in this program after each statement is executed.

```Python
# Command  # Value of x   # Value of y   # Value of swap #
x = 1.0    #              #              #               #
y = 3.0    #              #              #               #
swap = x   #              #              #               #
x = y      #              #              #               #
y = swap   #              #              #               #
```
:::

::: {.callout-caution collapse="true" icon="false"}
## Answer

| Command  | Value of x  | Value of y | Value of swap |
|----------|------------|----------|--------------|
| x = 1.0 | 1 | None | None |
| y = 3.0 | 1 | 3 | None |
| swap = x | 1 | 3 | 1 |
| x = y | 3|3|1|
| y = swap | 3 | 1 | 1|

:::


#### A
Fill the table showing the values of the variables in this program after each statement is executed.

```Python
# Command  # Value of x   # Value of y   # Value of swap #
x = 1.0    #              #              #               #
y = 3.0    #              #              #               #
swap = x   #              #              #               #
x = y      #              #              #               #
y = swap   #              #              #               #
```

::: {.callout-caution collapse="true" icon="false"}
## Answer

| Command  | Value of x  | Value of y | Value of swap |
|----------|------------|----------|--------------|
| x = 1.0 | 1 | None | None |
| y = 3.0 | 1 | 3 | None |
| swap = x | 1 | 3 | 1 |
| x = y | 3|3|1|
| y = swap | 3 | 1 | 1|

:::





#### A
::: {.callout-caution icon="false"}
## Question
Fill the table showing the values of the variables in this program after each statement is executed.

```Python
# Command  # Value of x   # Value of y   # Value of swap #
x = 1.0    #              #              #               #
y = 3.0    #              #              #               #
swap = x   #              #              #               #
x = y      #              #              #               #
y = swap   #              #              #               #
```
:::

::: {.callout-caution collapse="true" icon="false"}
## Answer

| Command  | Value of x  | Value of y | Value of swap |
|----------|------------|----------|--------------|
| x = 1.0 | 1 | None | None |
| y = 3.0 | 1 | 3 | None |
| swap = x | 1 | 3 | 1 |
| x = y | 3|3|1|
| y = swap | 3 | 1 | 1|

:::

#### B
::: {.callout-caution icon="false"}
## Question
What is the final value of position in the program below? (Try to predict the value without running the program, then check your prediction.)

```Python
initial = 'left'
position = initial
initial = 'right'
```
:::
::: {.callout-caution collapse="true" icon="false"}
## Answer
'left'
:::


::: callout-note
## BWA alignment options

BWA consists of three algorithms: BWA-backtrack, BWA-SW and BWA-MEM. The first algorithm is designed for Illumina sequence reads up to 100bp, while the other two are for sequences ranging from 70bp to 1Mbp. BWA-MEM and BWA-SW share similar features such as long-read support and split alignment, but BWA-MEM, which is the latest, is generally recommended for high-quality queries as it is faster and more accurate.
:::


::: {.callout-caution icon="false"}
## Exercise

Visualize the alignment of the reads for our SRR2584866 sample. What variant is present at position 4377265? What is the canonical nucleotide in that position?
:::

::: callout-important
## Key points

-   Bioinformatic command line tools are collections of commands that can be used to carry out bioinformatic analyses.
-   To use most powerful bioinformatic tools, you will need to use the command line.
-   There are many different file formats for storing genomics data. It is important to understand what type of information is contained in each file, and how it was derived.
:::

::: callout-tip
*Always read the manual page for any tool before using and make sure the options you use are appropriate for your data.*
:::

::: callout-tip
### "Challenge"

If you assign a = 123, what happens if you try to get the second digit of a via a[1]?
:::
::: {.callout-caution collapse="true" icon="false"}
## Answer
Numbers are not strings or sequences and Python will raise an error if you try to perform an index operation on a number. In the next lesson on types and type conversion we will learn more about types and how to convert between different types. If you want the Nth digit of a number you can convert it into a string using the str built-in function and then perform an index operation on that string.
```Python
a = 123
print(a[1])
```

TypeError: 'int' object is not subscriptable
:::
### Slicing

<!-- REMOVED TO SAVE TIME
##### A

What does the following program print?

```
atom_name = 'carbon'
print('atom_name[1:3] is:', atom_name[1:3])
```

###### B
-->

Given the following string:
```Python
species_name = "Acacia buxifolia"
```

::: {.callout-caution icon="false"}
## Question
What would these expressions return?

```Python
1. species_name[2:8]
2. species_name[11:] (without a value after the colon)
3. species_name[:4] (without a value before the colon)
4. species_name[:] (just a colon)
5. species_name[11:-3]
6. species_name[-5:-3]
```
:::
::: {.callout-caution collapse="true" icon="false"}
## Answer
```
species_name[2:8] returns the substring 'acia b'
species_name[11:] returns the substring 'folia', from position 11 until the end
species_name[:4] returns the substring 'Acac', from the start up to but not including position 4
species_name[:] returns the entire string 'Acacia buxifolia'
species_name[11:-3] returns the substring 'fo', from the 11th position to the third last position
species_name[-5:-3] also returns the substring 'fo', from the fifth last position to the third last

```
:::

::: {.callout-caution icon="false"}
## Question
What happens when you choose a stop value which is out of range? (i.e., try species_name[0:20] or species_name[:103])
:::
::: {.callout-caution collapse="true" icon="false"}
## Answer
If a part of the slice is out of range, the operation does not fail. species_name[0:20] gives the same result as species_name[0:], and species_name[:103] gives the same result as species_name[:]
:::

############################################################
---

# Lesson 2, additional exercises 

### Naming (Carpentries)
::: {.callout-caution icon="false"}
### "Question"
Which is a better variable name, m, min, or minutes? Why? Hint: think about which code you would rather inherit from someone who is leaving the lab:

```Python
ts = m * 60 + s
tot_sec = min * 60 + sec
total_seconds = minutes * 60 + seconds
```
:::

::: {.callout-caution collapse="true" icon="false"}
## Answer
minutes is better because min might mean something like “minimum” (and actually is an existing built-in function in Python that we will cover later).
:::

### A very challenging set of additional exercises (bioDSC)

::: {.callout-caution icon="false"}
### "Question"
What's happening here:

```Python

# use Google or chatGPT if you don't know the answers
# if you're at the end, try to play around more

greetings_strings = ['hello', 'bye', 'later']
print(greetings_strings[0])
print(greetings_strings[1][2])
    # (list of lists)

print([greetings_strings[idx] for idx in [0, 2]])
print([greetings_strings[0][idx] for idx in [0, 2, 4]])
print([greetings_strings[0][idx] for idx in range(0,4,2)])
    # using a loop (will be covered later) / list comprehension

square_values = [number**2 for number in range(10)]
square_values_string = [str(number**2) for number in range(10)]
print(square_values)
print(square_values_string)
    # types will be the topic of the next lesson

species_name = "Acacia buxifolia"
print("".join([species_name[i] for i in range(10, 2, -1)]))
    # convenient command when working with strings

print(species_name.replace('Aca', 'Bole'))
    # another convenient command

# Exercise:
list_of_species = ['','','','']
list_of_species = ['Homo sapiens', 'Escherichia Coli', 'Pan troglodytes', 'Canis lupus', 'Felis catus']
# Create a new lists, where you remove all letters 'e'
```
:::




::: {.callout-caution collapse="true" icon="false"}
## Answer


:::