---
toc: true
toc-expand: 2
---

::: {.callout-note}
## Credits & copyright
Many questions originate from the carpentry lesson ["Plotting and Programming in Python"](http://swcarpentry.github.io/python-novice-gapminder/), some were
authored by the *bio*DSC. Carpentries website materials are [licenced](https://software-carpentry.org/license/) under the [CC BY 4.0](https://creativecommons.org/licenses/by/4.0/),
which also applies to the contents of this website.
:::


---

# Exercises Lesson 12: Loops

<!-- ####################################################################### -->

### Tracing Execution

::: {.callout-tip icon='false'}
## Question 
Create a table showing the numbers of the lines that are executed when this program runs, and the values of the variables after each line is executed.

```python
1| total = 0
2| for char in "tin":
3|     total = total + 1
```

|Step  | Line Number | Variable Values       |
|------|-------------|-----------------------|
|1 | 1           | total = 0             |
|2 | 2           | total = 0, char = 't' |
|3 | 3           | .. |
|.. | ..           | .. |


:::

::: {.callout-caution collapse='true' icon='false'}
## Answer
|Step  | Line Number | Variable Values       |
|------|-------------|-----------------------|
|1 | 1           | total = 0             |
|2 | 2           | total = 0, char = 't' |
|3 | 3           | total = 1, char = 't' |
|4 | 2           | total = 1, char = 'i' |
|5 | 3           | total = 2, char = 'i' |
|6 | 2           | total = 2, char = 't' |
|7 | 3           | total = 3, char = 't' |



:::

<!-- Carpentries credits L12 -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: [Carpentries workshop materials](https://swcarpentry.github.io/python-novice-gapminder/12-for-loops.html){style="color: #777777" target=_blank}.</font>*
</div>

<!-- ####################################################################### -->

### Practice Accumulating

::: {.callout-tip icon='false'}
## Question A
Fill in the blanks in the program below to produce the indicated result.

```python
# Total length of the strings in the list: ["red", "green", "blue"] => 12
total = 0
for word in ["red", "green", "blue"]:
    ____ = ____ + len(word)
print(total)
```

:::
::: {.callout-caution collapse='true' icon='false'}
## Answer
```python
total = 0
for word in ["red", "green", "blue"]:
    total = total + len(word)
print(total)
```

:::

::: {.callout-tip icon='false'}
## Question B
Fill in the blanks in the program below to produce the indicated result.

```python
# List of word lengths: ["red", "green", "blue"] => [3, 5, 4]
lengths = ____
for word in ["red", "green", "blue"]:
    lengths.____(____)
print(lengths)
```

:::
::: {.callout-caution collapse='true' icon='false'}
## Answer

```python
lengths = []
for word in ["red", "green", "blue"]:
    lengths.append(len(word))
print(lengths)
```

:::

::: {.callout-tip icon='false'}
## Question C
Fill in the blanks in the program below to produce the indicated result.

```python
# Concatenate all words: ["red", "green", "blue"] => "redgreenblue"
words = ["red", "green", "blue"]
result = ____
for ____ in ____:
    ____
print(result)
```


:::


::: {.callout-caution collapse='true' icon='false'}
## Answer
```python
words = ["red", "green", "blue"]
result = ""
for word in words:
    result = result + word
print(result)
```
:::


<!-- Carpentries credits L12 -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: [Carpentries workshop materials](https://swcarpentry.github.io/python-novice-gapminder/12-for-loops.html){style="color: #777777" target=_blank}.</font>*
</div>


---

# Additional Exercises 


<!-- ####################################################################### -->

### Plotting automation

Remember this code from Lesson 9?

```python
df_all = pd.read_csv('data/gapminder_all.csv', index_col='country')
sns.scatterplot(df_all, x='gdpPercap_2007', y='lifeExp_2007', size='pop_2007', sizes=(1,40**2), legend=False)
plt.text(df_all.loc['United States','gdpPercap_2007'], df_all.loc['United States','lifeExp_2007'], 'United States')
plt.text(df_all.loc['Netherlands','gdpPercap_2007'], df_all.loc['Netherlands','lifeExp_2007'], 'Netherlands')
```

::: {.callout-tip icon='false'}
## Question 
Try to annotate 10 selected countries automatically.

:::

::: {.callout-caution collapse='true' icon='false'}
## Answer

```python
# Maybe get the top 3 and bottom 3, and some more
top3_life = df_all.loc[:,'lifeExp_2007'].nlargest(3).index
bottom3_life = df_all.loc[:,'lifeExp_2007'].nsmallest(3).index
custom_countries = ['Netherlands','United States']
# Merge those three lists
my_countries_to_select = list(top3_life) + list(bottom3_life) + custom_countries

# Plot
sns.scatterplot(df_all, x='gdpPercap_2007', y='lifeExp_2007', size='pop_2007', sizes=(1,40**2), legend=False)
# Now add text automatically
for country in my_countries_to_select:
    plt.text(df_all.loc[country,'gdpPercap_2007'], df_all.loc[country,'lifeExp_2007'], country, fontsize=5)
plt.show()

```

This plot looks like: 

![](/static/plots_pyworkshop/L12_GDPscatter.png){width=40%}

A bit messy with the overlapping text, but this worked great otherwise!

:::

<!-- bioDSC credits -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: *bio*DSC.</font>*
</div>


<!-- ####################################################################### -->

### Reversing a String

Fill in the blanks in the program below so that it prints “nit” (the reverse of the original character string “tin”).

::: {.callout-tip icon='false'}
## Question 
```python
original = "tin"
result = ____
for char in original:
    result = ____
print(result)
```


**Hint:** If this is challenging: 

- Try to first reproduce the word tin in result, using this loop. 
- Use a similar approach as the examples we used.

:::

::: {.callout-caution collapse='true' icon='false'}
## Answer
```python
original = "tin"
result = ""
for char in original:
    result = char + result
print(result)
```
:::

<!-- Carpentries credits L12 -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: [Carpentries workshop materials](https://swcarpentry.github.io/python-novice-gapminder/12-for-loops.html){style="color: #777777" target=_blank}.</font>*
</div>



<!-- ####################################################################### -->

### Practice Accumulating (again)

::: {.callout-tip icon='false'}
## Question 
Create an acronym: Starting from the list `["red", "green", "blue"]`, create the acronym "RGB" using a for loop.

- **Remark**: Note the capitals in "RGB"! You may need to use a string method to properly format the acronym.

:::

::: {.callout-caution collapse='true' icon='false'}
## Answer

```python
acronym = ""
for word in ["red", "green", "blue"]:
    acronym = acronym + word[0].upper()
print(acronym)
```

:::

<!-- Carpentries credits L12 -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: [Carpentries workshop materials](https://swcarpentry.github.io/python-novice-gapminder/12-for-loops.html){style="color: #777777" target=_blank}.</font>*
</div>

<!-- ####################################################################### -->

### Identifying Item Errors

::: {.callout-tip icon='false'}
## Question 
1. Read the code below and try to identify what the errors are without running it.
2. Run the code, and read the error message. What type of error is it?
3. Fix the error.

```python
seasons = ['Spring', 'Summer', 'Fall', 'Winter']
print('My favorite season is ', seasons[4])
```
:::


::: {.callout-caution collapse='true' icon='false'}
## Answer
This list has 4 elements and the index to access the last element in the list is 3.

```python
seasons = ['Spring', 'Summer', 'Fall', 'Winter']
print('My favorite season is ', seasons[3])
```
:::

<!-- Carpentries credits L12 -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: [Carpentries workshop materials](https://swcarpentry.github.io/python-novice-gapminder/12-for-loops.html){style="color: #777777" target=_blank}.</font>*
</div>

<!-- ####################################################################### -->

### Cumulative Sum (code puzzle)
::: {.callout-tip icon='false'}
## Question 

Reorder and properly indent the lines of code below so that they print a list with the cumulative sum of data. The result should be [1, 3, 5, 10].

```python
cumulative.append(total)
for number in data:
cumulative = []
total = total + number
total = 0
print(cumulative)
data = [1,2,2,5]
```

:::

::: {.callout-caution collapse='true' icon='false'}
## Answer

```python
total = 0
data = [1,2,2,5]
cumulative = []
for number in data:
    total = total + number
    cumulative.append(total)
print(cumulative)
```
:::

<!-- Carpentries credits L12 -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: [Carpentries workshop materials](https://swcarpentry.github.io/python-novice-gapminder/12-for-loops.html){style="color: #777777" target=_blank}.</font>*
</div>

<!-- ####################################################################### -->

### Identifying Variable Name Errors

::: {.callout-tip icon='false'}
## Question 
Read the code below and try to identify what the errors are without running it.

1. Run the code and read the error message. What type of NameError do you think this is? Is it a string with no quotes, a misspelled variable, or a variable that should have been defined but was not?
2. Fix the error.
3. Repeat steps 2 and 3, until you have fixed all the errors.

```python
for number in range(10):
    # use a if the number is a multiple of 3, otherwise use b
    if (Number % 3) == 0:
        message = message + a
    else:
        message = message + "b"
print(message)
```

:::

::: {.callout-caution collapse='true' icon='false'}
## Answer

1. Python variable names are case sensitive: number and Number refer to different variables.
2. The variable message needs to be initialized as an empty string.
3. We want to add the string "a" to message, not the undefined variable a.

```python
message = ""
for number in range(10):
    # use a if the number is a multiple of 3, otherwise use b
    if (number % 3) == 0:
        message = message + "a"
    else:
        message = message + "b"
print(message)
```
:::

<!-- Carpentries credits L12 -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: [Carpentries workshop materials](https://swcarpentry.github.io/python-novice-gapminder/12-for-loops.html){style="color: #777777" target=_blank}.</font>*
</div>

<!-- ####################################################################### -->

### Classifying Errors

::: {.callout-tip icon='false'}
## Question 
Is an indentation error a syntax error or a runtime error?
:::
::: {.callout-caution collapse='true' icon='false'}
## Answer
An IndentationError is a syntax error. Programs with syntax errors cannot be started. A program with a runtime error will start but an error will be thrown under certain conditions.
:::

<!-- Carpentries credits L12 -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: [Carpentries workshop materials](https://swcarpentry.github.io/python-novice-gapminder/12-for-loops.html){style="color: #777777" target=_blank}.</font>*
</div>
