::: {.callout-note}
## Note
Most questions originate from the carpentry lesson ["Plotting and Programming in Python"](http://swcarpentry.github.io/python-novice-gapminder/)
:::
---

# Exercises Lesson 12, Loops

### Tracing Execution

::: {.callout-tip icon='false'}
## Question A
Create a table showing the numbers of the lines that are executed when this program runs, and the values of the variables after each line is executed.

```python
1| total = 0
2| for char in "tin":
3|     total = total + 1
```

|Step  | Line Number | Variable Values       |
|------|-------------|-----------------------|
|1 | 1           | total = 0             |
|2 | 2           | total = 0, char = 't' |
|3 | 3           | .. |
|.. | ..           | .. |


:::

::: {.callout-caution collapse='true' icon='false'}
## Answer
|Step  | Line Number | Variable Values       |
|------|-------------|-----------------------|
|1 | 1           | total = 0             |
|2 | 2           | total = 0, char = 't' |
|3 | 3           | total = 1, char = 't' |
|4 | 2           | total = 1, char = 'i' |
|5 | 3           | total = 2, char = 'i' |
|6 | 2           | total = 2, char = 't' |
|7 | 3           | total = 3, char = 't' |



:::


### Practice Accumulating
::: {.callout-tip icon='false'}
## Question B
Fill in the blanks in each of the programs below to produce the indicated result.

```python
# Total length of the strings in the list: ["red", "green", "blue"] => 12
total = 0
for word in ["red", "green", "blue"]:
    ____ = ____ + len(word)
print(total)
```

:::
::: {.callout-caution collapse='true' icon='false'}
## Answer
```python
total = 0
for word in ["red", "green", "blue"]:
    total = total + len(word)
print(total)
```

:::



### Practice Accumulating 2 (continued)
::: {.callout-tip icon='false'}
## Question ...
Fill in the blanks in each of the programs below to produce the indicated result.

```python
# List of word lengths: ["red", "green", "blue"] => [3, 5, 4]
lengths = ____
for word in ["red", "green", "blue"]:
    lengths.____(____)
print(lengths)
```

:::
::: {.callout-caution collapse='true' icon='false'}
## Answer

```python
lengths = []
for word in ["red", "green", "blue"]:
    lengths.append(len(word))
print(lengths)
```

:::








### Practice Accumulating 3 (continued)
Fill in the blanks in each of the programs below to produce the indicated result.

::: {.callout-tip icon='false'}
## Question C
```python
# Concatenate all words: ["red", "green", "blue"] => "redgreenblue"
words = ["red", "green", "blue"]
result = ____
for ____ in ____:
    ____
print(result)
```


:::


::: {.callout-caution collapse='true' icon='false'}
## Answer
```python
words = ["red", "green", "blue"]
result = ""
for word in words:
    result = result + word
print(result)
```
:::

---

# Additional Exercises 

### Plotting automation

Remember this code from Lesson 9?

```python
data_all = pd.read_csv('data/gapminder_all.csv', index_col='country')
sns.scatterplot(data_all, x='gdpPercap_2007', y='lifeExp_2007', s=data_all['pop_2007']/1e6)
plt.text(df_all.loc['United States','gdpPercap_2007'], df_all.loc['United States','lifeExp_2007'], 'United States')
plt.text(df_all.loc['Netherlands','gdpPercap_2007'], df_all.loc['Netherlands','lifeExp_2007'], 'Netherlands')
```

::: {.callout-tip icon='false'}
## Question D
Try to annotate 10 selected countries automatically.

:::

::: {.callout-caution collapse='true' icon='false'}
## Answer

:::



### Reversing a String

Fill in the blanks in the program below so that it prints “nit” (the reverse of the original character string “tin”).

::: {.callout-tip icon='false'}
## Question E
```python
original = "tin"
result = ____
for char in original:
    result = ____
print(result)
```


**bioDSC hint**
If this is challenging: 
- try to first reproduce the word tin in result, using this loop. 
- Use a similar approach as the examples we used.

:::

::: {.callout-caution collapse='true' icon='false'}
## Answer
```python
original = "tin"
result = ""
for char in original:
    result = char + result
print(result)
```
:::

### Practice Accumulating (continued from above)

::: {.callout-tip icon='false'}
## Question F
Create an acronym: Starting from the list `["red", "green", "blue"]`, create the acronym "RGB" using a for loop.

- **bioDSC remark**: Note the capitals in "RGB"!
- **Hint**: You may need to use a string method to properly format the acronym.

:::

::: {.callout-caution collapse='true' icon='false'}
## Answer

```python
acronym = ""
for word in ["red", "green", "blue"]:
    acronym = acronym + word[0].upper()
print(acronym)
```

:::


### Identifying Item Errors

::: {.callout-tip icon='false'}
## Question G
Read the code below and try to identify what the errors are without running it.
2. Run the code, and read the error message. What type of error is it?
3. Fix the error.

```python
seasons = ['Spring', 'Summer', 'Fall', 'Winter']
print('My favorite season is ', seasons[4])
```
:::


::: {.callout-caution collapse='true' icon='false'}
## Answer
This list has 4 elements and the index to access the last element in the list is 3.

```python
seasons = ['Spring', 'Summer', 'Fall', 'Winter']
print('My favorite season is ', seasons[3])
```
:::


### Cumulative Sum (code puzzle)
::: {.callout-tip icon='false'}
## Question H

Reorder and properly indent the lines of code below so that they print a list with the cumulative sum of data. The result should be [1, 3, 5, 10].

```python
cumulative.append(total)
for number in data:
cumulative = []
total = total + number
total = 0
print(cumulative)
data = [1,2,2,5]
```

:::

::: {.callout-caution collapse='true' icon='false'}
## Answer

```python
total = 0
data = [1,2,2,5]
cumulative = []
for number in data:
    total = total + number
    cumulative.append(total)
print(cumulative)
```
:::



### Identifying Variable Name Errors

::: {.callout-tip icon='false'}
## Question I
Read the code below and try to identify what the errors are without running it.

1. Run the code and read the error message. What type of NameError do you think this is? Is it a string with no quotes, a misspelled variable, or a variable that should have been defined but was not?
2. Fix the error.
3. Repeat steps 2 and 3, until you have fixed all the errors.

```python
for number in range(10):
    # use a if the number is a multiple of 3, otherwise use b
    if (Number % 3) == 0:
        message = message + a
    else:
        message = message + "b"
print(message)
```

:::

::: {.callout-caution collapse='true' icon='false'}
## Answer

1. Python variable names are case sensitive: number and Number refer to different variables.
2. The variable message needs to be initialized as an empty string.
3. We want to add the string "a" to message, not the undefined variable a.

```python
message = ""
for number in range(10):
    # use a if the number is a multiple of 3, otherwise use b
    if (number % 3) == 0:
        message = message + "a"
    else:
        message = message + "b"
print(message)
```
:::



### Classifying Errors

::: {.callout-tip icon='false'}
## Question ...
Is an indentation error a syntax error or a runtime error?
:::
::: {.callout-caution collapse='true' icon='false'}
## Answer
An IndentationError is a syntax error. Programs with syntax errors cannot be started. A program with a runtime error will start but an error will be thrown under certain conditions.
:::

