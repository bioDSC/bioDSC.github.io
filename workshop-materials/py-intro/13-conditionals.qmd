
::: {.callout-note}
## Credits & copyright
Many questions originate from the carpentry lesson ["Plotting and Programming in Python"](http://swcarpentry.github.io/python-novice-gapminder/), some were
authored by the *bio*DSC. Carpentries website materials are [licenced](https://software-carpentry.org/license/) under the [CC BY 4.0](https://creativecommons.org/licenses/by/4.0/),
which also applies to the contents of this website.
:::


---


# Exercises Lesson 13, Conditionals

<!-- ####################################################################### -->

### Tracing Execution
::: {.callout-tip icon='false'}
## Question

What does this program print?

```python
pressure = 71.9
if pressure > 50.0:
    pressure = 25.0
elif pressure <= 50.0:
    pressure = 0.0
print(pressure)
```

:::


::: {.callout-caution collapse='true' icon='false'}
## Answer
```
25.0
```
:::

<!-- Carpentries credits L13 -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: [Carpentries workshop materials](https://swcarpentry.github.io/python-novice-gapminder/13-conditionals.html){style="color: #777777" target=_blank}.</font>*
</div>


<!-- ####################################################################### -->

### Trimming Values
::: {.callout-tip icon='false'}
## Question

Fill in the blanks so that this program creates a new list containing zeroes where the original list’s values were negative and ones where the original list’s values were positive.

```python
original = [-1.5, 0.2, 0.4, 0.0, -1.3, 0.4]
result = ____
for value in original:
    if ____:
        result.append(0)
    else:
        ____
print(result)
```

Desired output:
```
[0, 1, 1, 1, 0, 1]
```

:::
::: {.callout-caution collapse='true' icon='false'}
## Answer

```python
original = [-1.5, 0.2, 0.4, 0.0, -1.3, 0.4]
result = []
for value in original:
    if value < 0.0:
        result.append(0)
    else:
        result.append(1)
print(result)
```
:::

<!-- Carpentries credits L13 -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: [Carpentries workshop materials](https://swcarpentry.github.io/python-novice-gapminder/13-conditionals.html){style="color: #777777" target=_blank}.</font>*
</div>


<!-- ####################################################################### -->

### Processing Small Files

::: {.callout-tip icon='false'}
## Question
Modify this program so that it only processes files with fewer than 50 records.

```python
import glob
import pandas as pd
for filename in glob.glob('data/*.csv'):
    contents = pd.read_csv(filename)
    ____:
        print(filename, len(contents))
```        

:::

::: {.callout-caution collapse='true' icon='false'}
## Answer
```python
import glob
import pandas as pd
for filename in glob.glob('data/*.csv'):
    contents = pd.read_csv(filename)
    if len(contents) < 50:
        print(filename, len(contents))
```
:::

<!-- Carpentries credits L13 -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: [Carpentries workshop materials](https://swcarpentry.github.io/python-novice-gapminder/13-conditionals.html){style="color: #777777" target=_blank}.</font>*
</div>



---

# Additional Exercises Lesson 13

<!-- ####################################################################### -->

### List comprehension

::: {.callout-tip icon='false'}
## Question A
Adapt the following code to select only positive values:

```python
example_list = [1,2,3,4,-5,1,34,6,-10, 39]
example_list_pos = [___ for item in example_list if ___]
print(example_list_pos)
```

:::



::: {.callout-caution collapse='true' icon='false'}
## Answer

```python
example_list = [1,2,3,4,-5,1,34,6,-10, 39]
example_list_pos = [item for item in example_list if item>0]
print(example_list_pos)
```
```
[1, 2, 3, 4, 1, 34, 6, 39]
```
:::

::: {.callout-tip icon='false'}
## Question B

Use the same code, but:

1. select items between 30 and 40 
2. select items <0 or >10

:::

::: {.callout-caution collapse='true' icon='false'}
## Answer

1. 
```python
example_list = [1,2,3,4,-5,1,34,6,-10, 39]
example_list_1 = [item for item in example_list if item>30 and item<40 ]
print(example_list_1)
```
```
[34 39]
```

2. 
```python
example_list = [1,2,3,4,-5,1,34,6,-10, 39]
example_list_2 = [item for item in example_list if item<0 or item>10 ]
print(example_list_2)
```

```
[ -5  34 -10  39]
```


:::

::: {.callout-tip icon='false'}
## Question C
Use a np.array (see additional exercises Lesson 3) to do the same more elegantly.
:::

::: {.callout-caution collapse='true' icon='false'}
## Answer
1.
```python
import numpy as np
example_list = np.array([1,2,3,4,-5,1,34,6,-10, 39])
print(example_list[(example_list>30) & (example_list<40)])
```
```
[34 39]
```
Note that in this case we have to use the `&` operator because this is the **logical and** operation used in numpy. 

2.
```python
import numpy as np
example_list = np.array([1,2,3,4,-5,1,34,6,-10, 39])
print(example_list[(example_list<0) | (example_list>10)])
```
```
[ -5  34 -10  39]

```
Note that in this case we have to use the `|` operator because this is the **logical or** operation in used in numpy.

:::

<!-- bioDSC credits -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: *bio*DSC.</font>*
</div>




<!-- ####################################################################### -->

### Enumerate, zip 

These exercises introduce two new concepts. 
You might need google.

::: {.callout-tip icon='false'}
## Question A
What does the following code do? What is the meaning of the output?

```python
for idx, item in enumerate([1,2,3,4,-5,1,34,6,-10]):
    
    if item>5:
        print(idx)
```

:::

::: {.callout-caution collapse='true' icon='false'}
## Answer
The program prints the index when the value in the array is larger than 5, so in this case
```
6
7
```

The enumerate function ensures that in each loop iteration, 
idx gets the value corresponding to the list's index (enumerating each item from 0 .. length of the list), 
and item gets the value of that list's element.

:::



::: {.callout-tip icon='false'}
## Question B

Modify the following code such that it will compare each item i in apples with each item i in pears, and tell you which one is heavier.
You need to edit the code.

```python
apples = [123, 436, 123, 654, 117, 193, 120]
pears  = [543, 163, 178, 165, 123, 187, 190]

for apple_weight, pear_weight in zip(apples, pears):
    print('='*10)
    print('weigth apple: ', apple_weight)
    print('weigth pear:  ', pear_weight)
    
    print('the XXX is heavier')
```

:::

::: {.callout-caution collapse='true' icon='false'}
## Answer
```python
apples = [123, 436, 123, 654, 117, 193, 120]
pears  = [543, 163, 178, 165, 123, 187, 190]

for apple_weight, pear_weight in zip(apples, pears):
    print('='*10)
    print('weigth apple: ', apple_weight)
    print('weigth pear:  ', pear_weight)
    XXX = 'apple' if apple_weight>pear_weight else 'pear'
    print(f"the {XXX} is heavier")
```

```
==========
weigth apple:  123
weigth pear:   543
the pear is heavier
==========
weigth apple:  436
weigth pear:   163
the apple is heavier
==========
weigth apple:  123
weigth pear:   178
the pear is heavier
==========
weigth apple:  654
weigth pear:   165
the apple is heavier
==========
weigth apple:  117
weigth pear:   123
the pear is heavier
==========
weigth apple:  193
weigth pear:   187
the apple is heavier
==========
weigth apple:  120
weigth pear:   190
the pear is heavier
```
:::

<!-- bioDSC credits -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: *bio*DSC.</font>*
</div>



<!-- ####################################################################### -->

### Initializing

::: {.callout-tip icon='false'}
## Question 
Modify this program so that it finds the largest and smallest values in the list no matter what the range of values originally is.

```python
values = [...some test data...]
smallest, largest = None, None
for v in values:
    if ____:
        smallest, largest = v, v
    ____:
        smallest = min(____, v)
        largest = max(____, v)
print(smallest, largest)
```
1. What are the advantages and disadvantages of using this method to find the range of the data?

The loop could also look as follows:

```python
values = [...some test data...]
smallest, largest = None, None
for v in values:
    smallest = min(____, v)
    largest = max(____, v)
```

2. Why wouldn't this work and is the if statement needed. 
3. How can we test whether we are in the first iteration? 


:::
::: {.callout-caution collapse='true' icon='false'}
## Answer

```python
values = [-2,1,65,78,-54,-24,100]
for idx,v in enumerate(values):
    if idx == 0:
        smallest = v
        largest = v
    else:
        smallest = min(smallest, v)
        largest = max(largest, v)
print(smallest, largest)
```

1. If you wrote `== None` instead of `is None`, that works too, but Python programmers always write `is None` because of the special way `None` works in the language.
2. The min and max function do not accept `None` as an argument and we need to test for this sitation.
3. An iterator counter should be added to the for loop.

```python

values = [-2,1,65,78,-54,-24,100]
for idx,v in enumerate(values):
    if idx == 0:
        smallest = v
        largets = v
    else:
        smallest = min(smallest, v)
        largest = max(largest, v)
print(smallest, largest)
```

This allows the code to be implemented in a slightly different way, 
but this is less robust in case there is a None value in the values array.

In some other cases (e.g. when every loop iteration writes something to a file
and the file needs to be initialized in the first loop iteration) this type
of looping can be convenient.

Note that these exercises are merely illustrations of looping, the simplest solution
would be:

```python
values = [-2,1,65,78,-54,-24,100]
smallest = min(values)
largest = max(values)
print(smallest, largest)
```

A more efficient loop would be:

```python
values = [-2,1,65,78,-54,-24,100]
smallest, largest = None, None
for v in values:
    if smallest is None or v < smallest:
        smallest = v
    if largest is None or v > largest:
        largest = v
print(smallest, largest)
```

:::

<!-- Carpentries credits L13, modified -->
<div class="text-end">
*<font color="#aaaaaa" size=1>Source: [Carpentries workshop materials](https://swcarpentry.github.io/python-novice-gapminder/13-conditionals.html){style="color: #777777" target=_blank}, adapted by the *bio*DSC.</font>*
</div>



