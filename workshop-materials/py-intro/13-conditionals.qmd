::: {.callout-note}
## Note
Most questions originate from the carpentry lesson ["Plotting and Programming in Python"](http://swcarpentry.github.io/python-novice-gapminder/)
:::
---

# Exercises Lesson 13, Conditionals

### Tracing Execution
::: {.callout-tip icon='false'}
## Question A

What does this program print?

```python
pressure = 71.9
if pressure > 50.0:
    pressure = 25.0
elif pressure <= 50.0:
    pressure = 0.0
print(pressure)
```

:::


::: {.callout-caution collapse='true' icon='false'}
## Answer
```
25.0
```
:::


### Trimming Values
::: {.callout-tip icon='false'}
## Question B

Fill in the blanks so that this program creates a new list containing zeroes where the original list’s values were negative and ones where the original list’s values were positive.

```python
original = [-1.5, 0.2, 0.4, 0.0, -1.3, 0.4]
result = ____
for value in original:
    if ____:
        result.append(0)
    else:
        ____
print(result)
```

Desired output:
```
[0, 1, 1, 1, 0, 1]
```

:::
::: {.callout-caution collapse='true' icon='false'}
## Answer

```python
original = [-1.5, 0.2, 0.4, 0.0, -1.3, 0.4]
result = []
for value in original:
    if value < 0.0:
        result.append(0)
    else:
        result.append(1)
print(result)
```
:::

### Processing Small Files

::: {.callout-tip icon='false'}
## Question C
Modify this program so that it only processes files with fewer than 50 records.

```python
import glob
import pandas as pd
for filename in glob.glob('data/*.csv'):
    contents = pd.read_csv(filename)
    ____:
        print(filename, len(contents))
```        

:::

::: {.callout-caution collapse='true' icon='false'}
## Answer
```python
import glob
import pandas as pd
for filename in glob.glob('data/*.csv'):
    contents = pd.read_csv(filename)
    if len(contents) < 50:
        print(filename, len(contents))
```
:::


---

# Additional Exercises Lesson 13

### List comprehension

::: {.callout-tip icon='false'}
## Question D
Adapt the following code to select only positive values:

```python
example_list = [1,2,3,4,-5,1,34,6,-10, 39]
example_list_pos = [___ for item in example_list if ___]
print(example_list_pos)
```

:::



::: {.callout-caution collapse='true' icon='false'}
## Answer

:::



::: {.callout-tip icon='false'}
## Question E

Use the same code, but:
1. select values between 30 and 40
2. select items <0 or >10

:::

::: {.callout-caution collapse='true' icon='false'}
## Answer

:::


::: {.callout-tip icon='false'}
## Question F
Use a np.array (see additional exercises Lesson 3) to do the same more elegantly.
:::

::: {.callout-caution collapse='true' icon='false'}
## Answer
:::

### Enumerate, zip 

These exercises introduce two new concepts. 
You might need google.

::: {.callout-tip icon='false'}
## Question G
What does the following code do? What is the meaning of the output?

```python
for idx, item in enumerate([1,2,3,4,-5,1,34,6,-10]):
    
    if item>5:
        print(idx)
```

:::

::: {.callout-caution collapse='true' icon='false'}
## Answer

:::



::: {.callout-tip icon='false'}
## Question H

Modify the following code such that it will compare each item i in apples with each item i in pears, and tell you which one is heavier.
You need to edit the code.

```python
apples = [123, 436, 123, 654, 117, 193, 120]
pears  = [543, 163, 178, 165, 123, 187, 190]

for apple_weight, pear_weight in zip(apples, pears):
    print('='*10)
    print('weigth apple: ', apple_weight)
    print('weigth pear: ',pear_weight)
    
    print('the XXX is heavier')
```

:::

::: {.callout-caution collapse='true' icon='false'}
## Answer

:::


### Initializing

::: {.callout-tip icon='false'}
## Question H
Modify this program so that it finds the largest and smallest values in the list no matter what the range of values originally is.

```python
values = [...some test data...]
smallest, largest = None, None
for v in values:
    if ____:
        smallest, largest = v, v
    ____:
        smallest = min(____, v)
        largest = max(____, v)
print(smallest, largest)
```
1. What are the advantages and disadvantages of using this method to find the range of the data?

The loop could also look as follows:

```python
values = [...some test data...]
smallest, largest = None, None
for v in values:
    smallest = min(____, v)
    largest = max(____, v)
```

2. Why wouldn't this work and is the if statement needed. 
3. How can we test whether we are in the first iteration? WHY THIS QUESTION?


:::
::: {.callout-caution collapse='true' icon='false'}
## Answer
```python
values = [-2,1,65,78,-54,-24,100]
smallest, largest = None, None
for v in values:
    if smallest is None and largest is None:
        smallest, largest = v, v
    else:
        smallest = min(smallest, v)
        largest = max(largest, v)
print(smallest, largest)
```
1. If you wrote `== None` instead of `is None`, that works too, but Python programmers always write `is None` because of the special way `None` works in the language.
2. The min and max function do not accept `None` as an argument and we need to test for this sitation.
3. An iterator counter should be added to the for loop.
```python
for idx,v in enumerate(values)
```
:::



